第2章 顺序编程
2.1 变量
    变量定义方式：
    var 变量名 变量类型
    var v_int int               //(定义一个整型变量 v_int)
    var v_string string         //(定义一个字符串变量 v_string)
    var v_array [10]int         //(定义一个包含10个元素的整型数组v_array)
    var v_slice []int           //(定义一个切片，类似动态数组 v_slice)
    var v_struct struct｛       //(定义一个结构体变量 v_struct)
        id       int
        name     string
    ｝
    var v_point *int            //(定义一个指向整数指针变量 v_point)
    var v_map map[int]string    //(定义个map（可以理解为python中的字典）
                                //变量 v_map 键为int型，值为string型
    var v_func func(a_int int) int //定义指向函数的变量

    var （                      // 定义变量组，只能针对全局变量
        id      int
        name    string
    ）

    变量初始化（即定义变量的同时，对变量进行赋值）
    var a_int int = 3  // 第1种方式
    var a_int = 3      // 第2种方式
    a := 3             // 第3种方式, := 的用法，该方法只能
                       // 针对函数体里局部变量，不能用于全局变量
    如：
    for i:=0;i<10;i++ {  //伪代码
        //code
    }

    变量赋值（即先定义变量，然后在赋值）
    var a_string string
    a_string = "string test"

    var i_int int = 5
    var j_int int = 10
    i_int, j_int = j_int, i_int         //类似python的多重赋值，直接交换
                                        //两个变量,c/C++特别期盼的功能

    匿名变量（即使 _ 占位符的运用）
    如：
    func GetName（）（fst_name, sed_name, thd_name）｛
         return fst_name, sed_name, thd_name
    ｝
    该函数返回了三个变量，而我们只需要其中一个变量(如：thd_name)
    _, _, str_thd_name = GetName(fst_name, sed_name, thd_name）
    //采用占位符 作为匿名变量

2.2 常量
    常量定义
    const 常量名 <常量类型>
    const c_PI float64 = 3.14           //定义一个float64类型的常量c_PI
    const c_PI = 3.14                   //定义一个无类型的常量c_PI
    const （                            //定义一个常量组
          id int ＝ 1                   //指明常量id的类型为int型
          name ＝ "chehj"               //未指明常量name的类型
    ）

    go语言系统内置常量
    true，false，iota
    iota：较为特殊，每遇到const，都自动置为0，其后每引用一次iota就
          自动增加1

    const （                    //iota遇到const置为0
          c0 ＝ iota            // c0 = 0
          c1 ＝ iota            // c1 = 1，iota自增1
          c2 ＝ iota            // c2 = 2，iota自增2
    ）

    const c_x = iota            // c_x = 0,iota遇到const置为0
    const c_y = iota            // c_y = 0,iota遇到const置为0

    作为变相枚举类型的定义
    const （
          Sunday ＝ iota       //首字母大写代表包外可见
          Monday               //简写代表和上个常量一样的赋值
          Tuesday
          Wednesday
          Thursday
          Firday
          Saturday
          numdays               //首字母小写代表私有
）

2.3 类型
    布尔类型（bool）
    注意：只能被赋值true，false，不能接受其它类型的任何值
          也包括强制类型转换（如：bool（1））
    b_a := (1==2)               //正确
    b_a := (1!=2)               //正确
    var b_a bool ＝ 1           //错误
    var b_a bool ＝ bool（1）   //错误

    整型
    int8, uint8, int16, uint16, int32, uint32, int64, uint64
    int, uint, uintptr

    浮点型
    float32，float64

    复数型
    var com_num complex128 = 3.2 + 9j
    com_num := 3.2 + 9j
    com_num := complex(3.2, 9)
    rel_num = real(com_num)
    imag_num = imag(com_num)

    字符串
    go语言仅支持UTF-8和Unicode编码
    https://github.com/xushiwei/go-iconv
    单个字符类型
    1、byte（uint8）代表utf-8的单个字节的值
    2、rune 代表单个unicode字符

    数组
    [10]int
    两大特性：
    1、数组一旦定义，数组的长度将无法修改
     2、数组作为参数，被函数调用，相当于值传递

    数组切片（即动态数组）
    数组切片的数据结构：
    1、指向原生数组的指针
    2、数组切片中元素的个数
    3、数组切片已分配的存储空间

    基于数组定义数组切片的方法
    var myArray [10]int
    var mySlice []int = myArray[:5]

    直接定义数组切片的方法
    var mySlice []int = make([]int, 5)
    var mySlice []int = make([]int ,5, 10)
    var mySlice []int = []int{1,2,3,4,5}

    var mySlice2 []int = []int{1,2,3,4,5}

    mySlice = append(mySlice,1,2)               //追加元素
    mySlice = append(mySlice,myslice2...)       //数组切片作为参数追加
    数组切片会自动处理空间不足的问题

    基于数组切片定义数组切片的方法
    mySlice3 := mySlice[:4]

    map(一堆无序的键值对，即字典结构)
    创建方式：
    var myMap map[string] int
    myMap = make(map[string] int, 100)          // 只创建
    myMap := map[string] int {                  // 创建并初始化

    }

    元素赋值：
    myMap[key] = value

    元素删除：
    delete(myMap, key)          //若key不存在，也无所谓，无任何副作用，若key为nil，将会抛出异常

2.4 流程控制
    条件语句  //注意else的格式，必须和if的尾大括号在一行了
    if a>5 {
    //code
    }else{
    //code
    }

    多重选择语句
    switch i{

    case 表达式:
         //code

    case 表达式:
         fallthrough

    case 表达式:
         //code

    default:
        //code
    }

    switch {

    case 表达式:
         //code

    case 表达式:
         //code

    default:
         //code
    }


    循环语句（只支持 for 语句）
    普通循环
    sum := 0
    for i:=0;i<100;i++{
        sum += i
    }

    无限循环
    for｛
        //code
        break
    ｝

    跳转语句
    goto，break，continue

2.5 函数
    函数的定义
    func 函数名（参数列表）（返回值）
    如：
    func Myfunc（a, b int）(ret int, err bool)

    函数的不定参数
    func Myfunc（args ...int）(ret int, err bool)
    参数列表为任意多个int型

    func Myfunc（args []int）(ret int, err bool)
    args []int 与 args ...int 的本质是一样的，思考为何要采用args ...int
    这种语法糖的写法，方便调用，无需构建数组切片

    func Myfunc(args ...interface{})
    args ...interface{}带表可以是任意数据类型
    for _, arg := range args{
        arg.(type)  //获取每个参数的类型
    }

    函数多返回值（可以返回任意多个返回值）
    return a，b，c
    func Myfunc(args ...interface{})(n int, err Error){
         return      //不带参数的return，直接返回函数定义中返回值变量
    }

    匿名函数和闭包（无须定义函数名的一种函数实现方式）
    func(a,b int, z float) bool{
             return a*b>int(z)
    }(1,2,3.4)          //直接调用

    f_func =: func()func(){
           return func(){
           //code
           }

    }()
    f_func()    //闭包

2.6 错误处理
