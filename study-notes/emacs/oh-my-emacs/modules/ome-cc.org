#+TITLE: Oh My Emacs CC
#+OPTIONS: toc:2 num:nil ^:nil

This is part of [[https://github.com/xiaohanyu/oh-my-emacs][oh-my-emacs]].

This file contains some settings for =cc-mode=.

* Prerequisites
  :PROPERTIES:
  :CUSTOM_ID: cc-prerequisites
  :END:

#+NAME: cc-prerequisites
#+CAPTION: Prerequisites for ome-cc module
| Package    | Windows | Ubuntu/Debian/Mint  | ArchLinux | Fedora | Mac OS X        | Mandatory? |
|------------+---------+---------------------+-----------+--------+-----------------+------------|
| [[http://www.xmlsoft.org/][libxml2]]    |         | libxml2 libxml2-dev |           |        | libxml2 libxslt | Yes        |
| [[http://clang.llvm.org/][clang]]      |         | clang               |           |        |                 | Yes        |
| [[http://www.freedesktop.org/wiki/Software/pkg-config/][pkg-config]] |         | pkg-config          |           |        |                 | Yes        |
| [[http://www.cmake.org/][CMake]]      |         | cmake               |           |        |                 | No         |
| [[http://cscope.sourceforge.net/][Cscope]]     |         | cscope              |           |        |                 | No         |

Note:
- [[http://www.xmlsoft.org/][libxml2]], you need to =sudo apt-get install libxml2 libxml2-dev= in
  Ubuntu, and =brew install libxml2 libxslt= =brew link --force libxml2
  libxslt= in Mac with homebrew. There is required for el-get to build doxymacs.

* El-get packages
  :PROPERTIES:
  :CUSTOM_ID: cc-el-get-packages
  :END:

#+NAME: cc-el-get-packages
#+CAPTION: El-get packages for ome-cc module
| Package             | Status      | Description                     |
|---------------------+-------------+---------------------------------|
| cc-mode             | Builtin     | Where all the magic starts.     |
| [[http://www.itk.org/Wiki/CMake_Editors_Support][cmake-mode]]          | Recommended | Editing support for CMake.      |
| [[https://github.com/vmfhrmfoaj/cscope-el.git][xcscope]]             | Recommended | Code indexing and browsing.     |
| [[https://github.com/brianjcj/auto-complete-clang][auto-complete-clang]] | Required    | Semantic completiong for C/C++. |

* Basic CC-Mode Settings
  :PROPERTIES:
  :CUSTOM_ID: basic-cc
  :END:

=cc-mode= is not a single mode, actually, =cc-mode= is a collection of emacs
major mode for "editing files containing C, C++, Objective-C, Java, CORBA IDL
(and the variants CORBA PSDL and CIDL), Pike and AWK code."

Although =cc-mode= is a bit old, it is still powerful and flexible. It
contains a powerful [[http://www.gnu.org/software/emacs/manual/html_mono/ccmode.html#Indentation-Engine-Basics][indentation engine]], supports various builtin coding
[[http://www.gnu.org/software/emacs/manual/html_mono/ccmode.html#Styles][styles]], and provides various useful [[http://www.gnu.org/software/emacs/manual/html_mono/ccmode.html#Minor-Modes][minor modes]].

You do need some basic elisp knowledge to master the power of =cc-mode=. For
example, you need to know what the difference between =setq= and
=setq-default=, some basic knowledge about elisp hooks, etc.

#+NAME: basic
#+BEGIN_SRC emacs-lisp
(setq c-default-style '((java-mode . "java")
                        (awk-mode . "awk")
                        (c-mode . "k&r")
                        (c++-mode . "stroustrup")
                        (other . "linux")))

(setq-default c-basic-offset 4)
(add-to-list 'auto-mode-alist '("\\.h$" . c++-mode))

(defun ome-c-initialization-hook ()
  (define-key c-mode-base-map (kbd "RET") 'c-context-line-break))

(add-hook 'c-initialization-hook 'ome-c-initialization-hook)

(defun ome-c-mode-common-hook ()
  (add-to-list 'c-cleanup-list 'defun-close-semi)
  ;; (c-toggle-auto-newline)
  (c-toggle-hungry-state))

;; this will affect all modes derived from cc-mode, like
;; java-mode, php-mode, etc
(add-hook 'c-mode-common-hook 'ome-c-mode-common-hook)
#+END_SRC

* Makefile Settings
  :PROPERTIES:
  :CUSTOM_ID: makefile
  :END:

The only thing you need to do in =makefile-mode= is to enable tab indentation
instead of space indentation, since =makefile-mode= relies on tabs being tabs
instead of a mixture of spaces and tabs, which I think, is a bug, but used as
a feature of makefile. Ah, weird details and historical dirty quirks of
makefile.

#+NAME: makefile
#+BEGIN_SRC emacs-lisp
(add-hook 'makefile-mode-hook
          (lambda ()
            (setq indent-tabs-mode t)))
#+END_SRC

* CMake
  :PROPERTIES:
  :CUSTOM_ID: cmake
  :END:

[[http://www.cmake.org/][CMake]] is my favourite build tool for C/C++ software. To be precise, CMake is
not a build tool, since it does not build the project, instead, it generates
the files needed by your build tool(GNU make, Visual Studio, etc). The only
thing that I dislike about CMake is its syntax, which is weird and hard to
type. Anyway, it is much better than conventional [[http://en.wikipedia.org/wiki/GNU_build_system][Autotools]], IMHO, Autotools is
quite complicated, brings more problems than it solves. Do not use it unless
you have to.

#+NAME: cmake
#+BEGIN_SRC emacs-lisp
(when (executable-find "cmake")
  (ome-install 'cmake-mode))
#+END_SRC

* Indexing with Cscope
  :PROPERTIES:
  :CUSTOM_ID: cscope
  :END:

There're multiple tools for source browsing in Emacs, such as the builtin
[[http://www.gnu.org/software/emacs/manual/html_node/emacs/Tags.html][etags]], and [[http://ctags.sourceforge.net/][ctags]], etc. While etags/ctags supports multiple programming
languages, [[http://cscope.sourceforge.net/][cscope]] was designed for C code, however, you can do some [[http://cscope.sourceforge.net/cscope_vim_tutorial.html][hack]] to
make it work with C++/Java.

The limitation of tag-like source code indexing and browsing tools is, all
these tools lacks deep understanding of the programming language, all they know
is just symbols/tokens, they know little about semantics, so you may find
unwanted or wrong results with tag tools. Cscope understands some semantics of
C programming languages, such as symbol/function definitions, and it will lead
you to the right place in C programming language. No more promise for other
lanauges since cscope have no knowledge of OOP.

Cscope has a bundled =xcscope.el=, which provide an Emacs interface to
cscope. The default keybindings use the =C-c s= prefix:
- Finding:
  - =C-c s s= Find symbol.
  - =C-c s d= Find global definition.
  - =C-c s g= Find global definition (alternate binding).
  - =C-c s G= Find global definition without prompting.
  - =C-c s c= Find functions calling a function.
  - =C-c s C= Find called functions (list functions called from a function).
  - =C-c s t= Find text string.
  - =C-c s e= Find egrep pattern.
  - =C-c s f= Find a file.
  - =C-c s i= Find files #including a file.
- Navigation through the search results:
  - =C-c s b= Display *cscope* buffer.
  - =C-c s B= Auto display *cscope* buffer toggle.
  - =C-c s n= Next symbol.
  - =C-c s N= Next file.
  - =C-c s p= Previous symbol.
  - =C-c s P= Previous file.
  - =C-c s u= Pop mark.
- Setting and unsetting the variable, =cscope-initial-directory=, (location
  searched for the cscope database directory):
  - =C-c s a= Set initial directory.
  - =C-c s A= Unset initial directory.
- Database maintenance:
  - =C-c s L= Create list of files to index.
  - =C-c s I= Create list and index.
  - =C-c s E= Edit list of files to index.
  - =C-c s W= Locate this buffer's cscope directory ("W" --> "where").
  - =C-c s S= Locate this buffer's cscope directory. (alternate binding: "S"
    --> "show").
  - =C-c s T= Locate this buffer's cscope directory. (alternate binding: "T"
    --> "tell").
  - =C-c s D= Dired this buffer's directory.

#+NAME: cscope
#+BEGIN_SRC emacs-lisp
(if (executable-find "cscope")
    (ome-install 'xcscope))

#+END_SRC
* Auto-complete-clang
  :PROPERTIES:
  :CUSTOM_ID: auto-complete-clang
  :END:

Completion in Emacs is always a hot topic in Emacs community. Of course,
there're always solutions, but none of them is perfect. The traditional
approach relies on [[http://cedet.sourceforge.net/semantic.shtml][semantic]] from [[http://cedet.sourceforge.net/semantic.shtml][cedet]], which provides a parser for C/C++ and
various other lanauges. But I don't think it's a good idea to written a parser
in Elisp, especially a C++ parser. IMHO, semantic is bloated, slow, and often
make your Emacs stuck. So I didn't use it in oh-my-emacs.

The second choice is [[http://cx4a.org/software/gccsense/][GCCSense]], which is written by the same author of
[[http://cx4a.org/software/auto-complete/][auto-complete]]. I've read the manual but I found it a little complex to
install. So I won't adopt it.

Instead, I use [[https://github.com/brianjcj/auto-complete-clang][auto-complete-clang]], which combines the power of auto-complete,
clang, and yasnippet. I also write some wrapper functions for it, one of them
is interactive [[http://www.freedesktop.org/wiki/Software/pkg-config/][pkg-config]] completion support. Thus, if you just write a "hello
world" program with C/C++ standard library, then the semantic completion is
already at your fingertips. Otherwise, if you want to write some huge
programs with third-party libs, then just =M-x
ome-pkg-config-enable-clang-flag name-of-lib=, and completion will be right
here. Ensure that you have pkg-config installed and all the necessary libs
installed if you want to write program with that library.

The default auto-complete-clang package didn't provide completion for C/C++
macros, so I did a little hack by setting =ac-clang-flags=, see
https://github.com/Rip-Rip/clang_complete/issues/42 for technical details.

#+NAME: auto-complete-clang
#+BEGIN_SRC emacs-lisp
(defun ome-pkg-config-enable-clang-flag (pkg-config-lib)
  "This function will add necessary header file path of a
specified by `pkg-config-lib' to `ac-clang-flags', which make it
completionable by auto-complete-clang"
  (interactive "spkg-config lib: ")
  (if (executable-find "pkg-config")
      (if (= (shell-command
              (format "pkg-config %s" pkg-config-lib))
             0)
          (setq ac-clang-flags
                (append ac-clang-flags
                        (split-string
                         (shell-command-to-string
                          (format "pkg-config --cflags-only-I %s"
                                  pkg-config-lib)))))
        (message "Error, pkg-config lib %s not found." pkg-config-lib))
    (message "Error: pkg-config tool not found.")))

;; (ome-pkg-config-enable-clang-flag "QtGui")

(defun ome-auto-complete-clang-setup ()
  (require 'auto-complete-clang)
  (setq command "echo | g++ -v -x c++ -E - 2>&1 |
                 grep -A 20 starts | grep include | grep -v search")
  (setq ac-clang-flags
        (mapcar (lambda (item)
                  (concat "-I" item))
                (split-string
                 (shell-command-to-string command))))
  ;; completion for C/C++ macros.
  (push "-code-completion-macros" ac-clang-flags)
  (push "-code-completion-patterns" ac-clang-flags)
  (dolist (mode-hook '(c-mode-hook c++-mode-hook))
    (add-hook mode-hook
              (lambda ()
                (add-to-list 'ac-sources 'ac-source-clang)))))

(when (executable-find "clang")
  (ome-install 'auto-complete-clang))
#+END_SRC

* Todo
- Port cc-mode's =hungry-delete= to other mode.
- Documentation for some useful cc-mode keybindings such as
  - =C-c C-c=
  - =M-;=
- Integrate [[http://www.wonderworks.com/download/filladapt.el][filladapt]] package to enhance emacs's adaptive filling.
- Add special font-lock support for some Qt's "keywords" such as "signal" and
  "slot".
- Auto-complete-clang:
  - For huge C/C++ programs, auto-complete-clang maybe a little slow, maybe
    https://github.com/Golevka/emacs-clang-complete-async is a better
    solution.
- Learn something about [[http://www.gnu.org/software/global/][GNU Global]], thanks [[http://www.reddit.com/user/stack_pivot][stack_pivot]].
