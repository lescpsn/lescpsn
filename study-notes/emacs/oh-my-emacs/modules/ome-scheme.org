#+TITLE: Oh My Emacs Scheme
#+OPTIONS: toc:2 num:nil ^:nil

This is part of [[https://github.com/xiaohanyu/oh-my-emacs][oh-my-emacs]].

This file contains some settings [[* Scheme][Scheme]] programming language.

* Prerequisites
  :PROPERTIES:
  :CUSTOM_ID: scheme-prerequisites
  :END:

#+NAME: scheme-prerequisites
#+CAPTION: Prerequisites for ome-scheme module
| Package | Windows | Ubuntu/Debian/Mint | ArchLinux | Fedora | Mac OS X | Mandatory? |
|---------+---------+--------------------+-----------+--------+----------+------------|
| [[http://www.gnu.org/software/guile/][Guile]]   |         | guile-2.0          |           |        |          | Yes        |

Note:
- [[http://www.gnu.org/software/guile/][Guile]] or [[http://racket-lang.org/][Racket]] as a Scheme implementation. Geiser requires Guile >= 2.0.

* El-get packages
  :PROPERTIES:
  :CUSTOM_ID: scheme-el-get-packages
  :END:

#+NAME: scheme-el-get-packages
#+CAPTION: El-get packages for ome-scheme module
| Package   | Status   | Description                                    |
|-----------+----------+------------------------------------------------|
| [[http://www.nongnu.org/geiser/][geiser]]    | Required | Geiser to Scheme is what slime to Common Lisp. |
| [[https://github.com/xiaohanyu/ac-geiser][ac-geiser]] | Required | Auto-complete backend for geiser.              |

* Scheme
  :PROPERTIES:
  :CUSTOM_ID: scheme
  :END:

[[http://en.wikipedia.org/wiki/Scheme_(programming_language)][Scheme]] is my favourite programming language, it is small, elegant and
powerful. Unfortunately, there're too many choices for scheme implementation,
which makes it a headache when you want to do some real world job with scheme.

Oh-my-emacs adopts [[http://www.nongnu.org/geiser/][geiser]], which provides a similar SLIME way to work with
scheme. To install geiser, you need install =automake= and =autoconf=. And to
run geiser, you need install at least one of the geiser supported scheme
implementation, namely, [[http://www.gnu.org/software/guile/][guile]] or [[http://racket-lang.org/][racket]].

Geiser also provide flexible methods for user customization, check its [[http://geiser.nongnu.org/geiser_3.html#Customization-and-tips][manual]]
for details. For guile, I just =(setq geiser-guile-load-init-file-p t)= to make
it load =$HOME/.guile= when start.

There's a new experimental [[https://github.com/xiaohanyu/ac-geiser][ac-geiser]] project, written by me --- yeah, it's me,
I am the author, which provides a auto-complete backend for geiser. It is
still in beta version, however, and will be sent to el-get when stable.

#+NAME: geiser
#+BEGIN_SRC emacs-lisp
(defun ome-geiser-setup ()
  (setq ome-geiser-impl
        (or (and (executable-find "racket") 'racket)
            (and (executable-find "guile") 'guile)
            (and (executable-find "csi") 'chicken)))
  (setq geiser-default-implementation ome-geiser-impl)
  (setq geiser-guile-load-init-file-p t)
  (add-hook 'geiser-mode-hook
            (lambda () (setq geiser-impl--implementation ome-geiser-impl))))

(defun ome-ac-geiser-setup ()
  (add-hook 'geiser-mode-hook 'ac-geiser-setup)
  (add-hook 'geiser-repl-mode-hook 'ac-geiser-setup)
  (eval-after-load "auto-complete"
    '(add-to-list 'ac-modes 'geiser-repl-mode)))

(when (or (executable-find "racket")
          (executable-find "guile")
          (executable-find "chicken"))
  (ome-install 'geiser)
  (ome-install 'ac-geiser))

;; (ome-install 'quack)
#+END_SRC

Actually, the official SLIME contrib has some swank backends for scheme
implementations, you can try it if you like. There's a [[https://github.com/nickg/swank-chicken][swank-chicken]] for
[[http://www.call-cc.org/][chicken scheme]], but it only provides a small part of SLIME features. So it is
disabled by default.

#+NAME: chicken
#+BEGIN_SRC emacs-lisp :tangle no
(defun ome-swank-chicken-setup ()
  (setq swank-chicken-path "~/.emacs.d/el-get/swank-chicken/swank-chicken.scm")
  (add-hook 'scheme-mode-hook
            (lambda ()
              (slime-mode t))))

(ome-install 'swank-chicken)
#+END_SRC
