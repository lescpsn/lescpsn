// Code generated by protoc-gen-go.
// source: photo.proto
// DO NOT EDIT!

package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type PhotoType int32

const (
	PhotoType_photo_type_null   PhotoType = 0
	PhotoType_photo_type_system PhotoType = 1
	PhotoType_photo_type_edited PhotoType = 2
)

var PhotoType_name = map[int32]string{
	0: "photo_type_null",
	1: "photo_type_system",
	2: "photo_type_edited",
}
var PhotoType_value = map[string]int32{
	"photo_type_null":   0,
	"photo_type_system": 1,
	"photo_type_edited": 2,
}

func (x PhotoType) String() string {
	return proto1.EnumName(PhotoType_name, int32(x))
}
func (PhotoType) EnumDescriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

type PhotoPrivacy int32

const (
	PhotoPrivacy_photo_privacy_null    PhotoPrivacy = 0
	PhotoPrivacy_photo_privacy_public  PhotoPrivacy = 1
	PhotoPrivacy_photo_privacy_private PhotoPrivacy = 2
)

var PhotoPrivacy_name = map[int32]string{
	0: "photo_privacy_null",
	1: "photo_privacy_public",
	2: "photo_privacy_private",
}
var PhotoPrivacy_value = map[string]int32{
	"photo_privacy_null":    0,
	"photo_privacy_public":  1,
	"photo_privacy_private": 2,
}

func (x PhotoPrivacy) String() string {
	return proto1.EnumName(PhotoPrivacy_name, int32(x))
}
func (PhotoPrivacy) EnumDescriptor() ([]byte, []int) { return fileDescriptor5, []int{1} }

type PersistentType int32

const (
	PersistentType_persistent_type_null             PersistentType = 0
	PersistentType_persistent_type_new_photo        PersistentType = 1
	PersistentType_persistent_type_new_edited_photo PersistentType = 2
	PersistentType_persistent_type_edited_photo     PersistentType = 3
	PersistentType_persistent_type_edited_avatar    PersistentType = 4
)

var PersistentType_name = map[int32]string{
	0: "persistent_type_null",
	1: "persistent_type_new_photo",
	2: "persistent_type_new_edited_photo",
	3: "persistent_type_edited_photo",
	4: "persistent_type_edited_avatar",
}
var PersistentType_value = map[string]int32{
	"persistent_type_null":             0,
	"persistent_type_new_photo":        1,
	"persistent_type_new_edited_photo": 2,
	"persistent_type_edited_photo":     3,
	"persistent_type_edited_avatar":    4,
}

func (x PersistentType) String() string {
	return proto1.EnumName(PersistentType_name, int32(x))
}
func (PersistentType) EnumDescriptor() ([]byte, []int) { return fileDescriptor5, []int{2} }

type BasePhoto struct {
	ID           int64        `protobuf:"varint,1,opt,name=ID,json=iD" json:"ID,omitempty"`
	UUID         string       `protobuf:"bytes,2,opt,name=UUID,json=uUID" json:"UUID,omitempty"`
	Width        *IntegerType `protobuf:"bytes,3,opt,name=Width,json=width" json:"Width,omitempty"`
	Height       *IntegerType `protobuf:"bytes,4,opt,name=Height,json=height" json:"Height,omitempty"`
	FileURL      *StringType  `protobuf:"bytes,5,opt,name=FileURL,json=fileURL" json:"FileURL,omitempty"`
	FileUUID     string       `protobuf:"bytes,6,opt,name=FileUUID,json=fileUUID" json:"FileUUID,omitempty"`
	FileSize     *IntegerType `protobuf:"bytes,7,opt,name=FileSize,json=fileSize" json:"FileSize,omitempty"`
	PrimaryColor *StringType  `protobuf:"bytes,8,opt,name=PrimaryColor,json=primaryColor" json:"PrimaryColor,omitempty"`
}

func (m *BasePhoto) Reset()                    { *m = BasePhoto{} }
func (m *BasePhoto) String() string            { return proto1.CompactTextString(m) }
func (*BasePhoto) ProtoMessage()               {}
func (*BasePhoto) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

func (m *BasePhoto) GetWidth() *IntegerType {
	if m != nil {
		return m.Width
	}
	return nil
}

func (m *BasePhoto) GetHeight() *IntegerType {
	if m != nil {
		return m.Height
	}
	return nil
}

func (m *BasePhoto) GetFileURL() *StringType {
	if m != nil {
		return m.FileURL
	}
	return nil
}

func (m *BasePhoto) GetFileSize() *IntegerType {
	if m != nil {
		return m.FileSize
	}
	return nil
}

func (m *BasePhoto) GetPrimaryColor() *StringType {
	if m != nil {
		return m.PrimaryColor
	}
	return nil
}

type Photo struct {
	ID             int64        `protobuf:"varint,1,opt,name=ID,json=iD" json:"ID,omitempty"`
	UUID           string       `protobuf:"bytes,2,opt,name=UUID,json=uUID" json:"UUID,omitempty"`
	CreatedAt      string       `protobuf:"bytes,3,opt,name=CreatedAt,json=createdAt" json:"CreatedAt,omitempty"`
	User           *User        `protobuf:"bytes,4,opt,name=User,json=user" json:"User,omitempty"`
	UserUUID       string       `protobuf:"bytes,5,opt,name=UserUUID,json=userUUID" json:"UserUUID,omitempty"`
	RawPhoto       *BasePhoto   `protobuf:"bytes,6,opt,name=RawPhoto,json=rawPhoto" json:"RawPhoto,omitempty"`
	Width          *IntegerType `protobuf:"bytes,7,opt,name=Width,json=width" json:"Width,omitempty"`
	Height         *IntegerType `protobuf:"bytes,8,opt,name=Height,json=height" json:"Height,omitempty"`
	InPipeline     *BooleanType `protobuf:"bytes,9,opt,name=InPipeline,json=inPipeline" json:"InPipeline,omitempty"`
	PhotoType      PhotoType    `protobuf:"varint,10,opt,name=PhotoType,json=photoType,enum=proto.PhotoType" json:"PhotoType,omitempty"`
	FileUUID       string       `protobuf:"bytes,11,opt,name=FileUUID,json=fileUUID" json:"FileUUID,omitempty"`
	FileSize       *IntegerType `protobuf:"bytes,12,opt,name=FileSize,json=fileSize" json:"FileSize,omitempty"`
	FileURL        *StringType  `protobuf:"bytes,13,opt,name=FileURL,json=fileURL" json:"FileURL,omitempty"`
	Identifier     *StringType  `protobuf:"bytes,14,opt,name=Identifier,json=identifier" json:"Identifier,omitempty"`
	PhotoPrivacy   PhotoPrivacy `protobuf:"varint,15,opt,name=PhotoPrivacy,json=photoPrivacy,enum=proto.PhotoPrivacy" json:"PhotoPrivacy,omitempty"`
	PrimaryColor   *StringType  `protobuf:"bytes,16,opt,name=PrimaryColor,json=primaryColor" json:"PrimaryColor,omitempty"`
	GEOLocation    *StringType  `protobuf:"bytes,17,opt,name=GEOLocation,json=gEOLocation" json:"GEOLocation,omitempty"`
	Note           *Note        `protobuf:"bytes,18,opt,name=Note,json=note" json:"Note,omitempty"`
	NoteUUID       string       `protobuf:"bytes,19,opt,name=NoteUUID,json=noteUUID" json:"NoteUUID,omitempty"`
	URL            *StringType  `protobuf:"bytes,20,opt,name=URL,json=uRL" json:"URL,omitempty"`
	DisplayVersion *IntegerType `protobuf:"bytes,21,opt,name=DisplayVersion,json=displayVersion" json:"DisplayVersion,omitempty"`
	EditParam      *StringType  `protobuf:"bytes,22,opt,name=EditParam,json=editParam" json:"EditParam,omitempty"`
	IsAvatar       *BooleanType `protobuf:"bytes,23,opt,name=IsAvatar,json=isAvatar" json:"IsAvatar,omitempty"`
	IsTuso         *BooleanType `protobuf:"bytes,24,opt,name=IsTuso,json=isTuso" json:"IsTuso,omitempty"`
	CommentsCount  *IntegerType `protobuf:"bytes,25,opt,name=CommentsCount,json=commentsCount" json:"CommentsCount,omitempty"`
	Timestamp      string       `protobuf:"bytes,26,opt,name=Timestamp,json=timestamp" json:"Timestamp,omitempty"`
	Exif           *StringType  `protobuf:"bytes,27,opt,name=Exif,json=exif" json:"Exif,omitempty"`
}

func (m *Photo) Reset()                    { *m = Photo{} }
func (m *Photo) String() string            { return proto1.CompactTextString(m) }
func (*Photo) ProtoMessage()               {}
func (*Photo) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{1} }

func (m *Photo) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *Photo) GetRawPhoto() *BasePhoto {
	if m != nil {
		return m.RawPhoto
	}
	return nil
}

func (m *Photo) GetWidth() *IntegerType {
	if m != nil {
		return m.Width
	}
	return nil
}

func (m *Photo) GetHeight() *IntegerType {
	if m != nil {
		return m.Height
	}
	return nil
}

func (m *Photo) GetInPipeline() *BooleanType {
	if m != nil {
		return m.InPipeline
	}
	return nil
}

func (m *Photo) GetFileSize() *IntegerType {
	if m != nil {
		return m.FileSize
	}
	return nil
}

func (m *Photo) GetFileURL() *StringType {
	if m != nil {
		return m.FileURL
	}
	return nil
}

func (m *Photo) GetIdentifier() *StringType {
	if m != nil {
		return m.Identifier
	}
	return nil
}

func (m *Photo) GetPrimaryColor() *StringType {
	if m != nil {
		return m.PrimaryColor
	}
	return nil
}

func (m *Photo) GetGEOLocation() *StringType {
	if m != nil {
		return m.GEOLocation
	}
	return nil
}

func (m *Photo) GetNote() *Note {
	if m != nil {
		return m.Note
	}
	return nil
}

func (m *Photo) GetURL() *StringType {
	if m != nil {
		return m.URL
	}
	return nil
}

func (m *Photo) GetDisplayVersion() *IntegerType {
	if m != nil {
		return m.DisplayVersion
	}
	return nil
}

func (m *Photo) GetEditParam() *StringType {
	if m != nil {
		return m.EditParam
	}
	return nil
}

func (m *Photo) GetIsAvatar() *BooleanType {
	if m != nil {
		return m.IsAvatar
	}
	return nil
}

func (m *Photo) GetIsTuso() *BooleanType {
	if m != nil {
		return m.IsTuso
	}
	return nil
}

func (m *Photo) GetCommentsCount() *IntegerType {
	if m != nil {
		return m.CommentsCount
	}
	return nil
}

func (m *Photo) GetExif() *StringType {
	if m != nil {
		return m.Exif
	}
	return nil
}

type Note struct {
	ID        int64       `protobuf:"varint,1,opt,name=ID,json=iD" json:"ID,omitempty"`
	UUID      string      `protobuf:"bytes,2,opt,name=UUID,json=uUID" json:"UUID,omitempty"`
	CreatedAt string      `protobuf:"bytes,3,opt,name=CreatedAt,json=createdAt" json:"CreatedAt,omitempty"`
	UserUUID  string      `protobuf:"bytes,4,opt,name=UserUUID,json=userUUID" json:"UserUUID,omitempty"`
	Title     *StringType `protobuf:"bytes,5,opt,name=Title,json=title" json:"Title,omitempty"`
	Content   *StringType `protobuf:"bytes,6,opt,name=Content,json=content" json:"Content,omitempty"`
	Style     *StringType `protobuf:"bytes,7,opt,name=Style,json=style" json:"Style,omitempty"`
	Timestamp string      `protobuf:"bytes,8,opt,name=Timestamp,json=timestamp" json:"Timestamp,omitempty"`
}

func (m *Note) Reset()                    { *m = Note{} }
func (m *Note) String() string            { return proto1.CompactTextString(m) }
func (*Note) ProtoMessage()               {}
func (*Note) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{2} }

func (m *Note) GetTitle() *StringType {
	if m != nil {
		return m.Title
	}
	return nil
}

func (m *Note) GetContent() *StringType {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *Note) GetStyle() *StringType {
	if m != nil {
		return m.Style
	}
	return nil
}

type File struct {
	ID             int64          `protobuf:"varint,1,opt,name=ID,json=iD" json:"ID,omitempty"`
	UUID           string         `protobuf:"bytes,2,opt,name=UUID,json=uUID" json:"UUID,omitempty"`
	CreatedAt      string         `protobuf:"bytes,3,opt,name=CreatedAt,json=createdAt" json:"CreatedAt,omitempty"`
	UserUUID       string         `protobuf:"bytes,4,opt,name=UserUUID,json=userUUID" json:"UserUUID,omitempty"`
	Bucket         *StringType    `protobuf:"bytes,5,opt,name=Bucket,json=bucket" json:"Bucket,omitempty"`
	Key            *StringType    `protobuf:"bytes,6,opt,name=Key,json=key" json:"Key,omitempty"`
	Size           *IntegerType   `protobuf:"bytes,7,opt,name=Size,json=size" json:"Size,omitempty"`
	PersistentID   *StringType    `protobuf:"bytes,8,opt,name=PersistentID,json=persistentID" json:"PersistentID,omitempty"`
	PersistentType PersistentType `protobuf:"varint,9,opt,name=PersistentType,json=persistentType,enum=proto.PersistentType" json:"PersistentType,omitempty"`
}

func (m *File) Reset()                    { *m = File{} }
func (m *File) String() string            { return proto1.CompactTextString(m) }
func (*File) ProtoMessage()               {}
func (*File) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{3} }

func (m *File) GetBucket() *StringType {
	if m != nil {
		return m.Bucket
	}
	return nil
}

func (m *File) GetKey() *StringType {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *File) GetSize() *IntegerType {
	if m != nil {
		return m.Size
	}
	return nil
}

func (m *File) GetPersistentID() *StringType {
	if m != nil {
		return m.PersistentID
	}
	return nil
}

func init() {
	proto1.RegisterType((*BasePhoto)(nil), "proto.BasePhoto")
	proto1.RegisterType((*Photo)(nil), "proto.Photo")
	proto1.RegisterType((*Note)(nil), "proto.Note")
	proto1.RegisterType((*File)(nil), "proto.File")
	proto1.RegisterEnum("proto.PhotoType", PhotoType_name, PhotoType_value)
	proto1.RegisterEnum("proto.PhotoPrivacy", PhotoPrivacy_name, PhotoPrivacy_value)
	proto1.RegisterEnum("proto.PersistentType", PersistentType_name, PersistentType_value)
}

func init() { proto1.RegisterFile("photo.proto", fileDescriptor5) }

var fileDescriptor5 = []byte{
	// 877 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xb4, 0x96, 0xdd, 0x6e, 0xe3, 0x44,
	0x14, 0x80, 0x49, 0x62, 0x3b, 0xf6, 0x49, 0xeb, 0x4d, 0xa7, 0x9b, 0x65, 0x1a, 0x76, 0x45, 0x09,
	0x7f, 0x4b, 0x41, 0x45, 0x74, 0x85, 0x40, 0x48, 0x5c, 0xb4, 0x69, 0x81, 0x88, 0xaa, 0x44, 0x6e,
	0x0a, 0x17, 0x5c, 0x54, 0x6e, 0x32, 0x49, 0x46, 0x75, 0x6c, 0xcb, 0x1e, 0xb7, 0x98, 0x3b, 0xde,
	0x09, 0x5e, 0x84, 0xb7, 0xe0, 0x2d, 0x98, 0x19, 0xdb, 0xa9, 0x9d, 0x76, 0xda, 0x5c, 0xc0, 0x8d,
	0xe3, 0x39, 0xe7, 0x9b, 0x33, 0xe7, 0x6f, 0x8e, 0x03, 0xad, 0x70, 0x1e, 0xb0, 0x60, 0x3f, 0x8c,
	0xf8, 0x13, 0xe9, 0xf2, 0xa7, 0x6b, 0xfb, 0x89, 0xe7, 0xb1, 0x34, 0x24, 0x99, 0xb8, 0x0b, 0x49,
	0x4c, 0xa2, 0xec, 0xbd, 0xf7, 0x57, 0x1d, 0xac, 0x23, 0x37, 0x26, 0x43, 0xb1, 0x0d, 0xd9, 0x50,
	0x1f, 0x1c, 0xe3, 0xda, 0x6e, 0xed, 0x75, 0xc3, 0xa9, 0xd3, 0x63, 0x84, 0x40, 0xbb, 0xb8, 0xe0,
	0x92, 0x3a, 0x97, 0x58, 0x8e, 0x96, 0xf0, 0x77, 0xf4, 0x1a, 0xf4, 0x5f, 0xe8, 0x84, 0xcd, 0x71,
	0x83, 0x0b, 0x5b, 0x07, 0x28, 0x33, 0xb4, 0x3f, 0xf0, 0x19, 0x99, 0x91, 0x68, 0xc4, 0x8f, 0x71,
	0xf4, 0x5b, 0x01, 0xa0, 0x3d, 0x30, 0x7e, 0x20, 0x74, 0x36, 0x67, 0x58, 0x53, 0xa2, 0xc6, 0x5c,
	0x12, 0xe8, 0x53, 0x68, 0x7e, 0x47, 0x3d, 0x72, 0xe1, 0x9c, 0x62, 0x5d, 0xc2, 0x5b, 0x39, 0x7c,
	0xce, 0x22, 0xea, 0xcf, 0x24, 0xdb, 0x9c, 0x66, 0x04, 0xea, 0x82, 0x29, 0x61, 0xe1, 0x9a, 0x21,
	0x5d, 0x33, 0xa7, 0xf9, 0x1a, 0xed, 0x67, 0xba, 0x73, 0xfa, 0x3b, 0xc1, 0x4d, 0xe5, 0xb1, 0x92,
	0x17, 0x0c, 0xfa, 0x12, 0x36, 0x86, 0x11, 0x5d, 0xb8, 0x51, 0xda, 0x0f, 0xbc, 0x20, 0xc2, 0xa6,
	0xea, 0xf4, 0x8d, 0xb0, 0x84, 0xf5, 0xfe, 0x31, 0x41, 0x5f, 0x3f, 0x67, 0x2f, 0xc1, 0xea, 0x47,
	0xc4, 0x65, 0x64, 0x72, 0xc8, 0x64, 0xde, 0x2c, 0xc7, 0x1a, 0x17, 0x02, 0xf4, 0x2e, 0xdf, 0xc1,
	0x2b, 0x92, 0x67, 0xa9, 0x95, 0x1f, 0x2d, 0x44, 0x7c, 0x3b, 0x7f, 0x8a, 0x78, 0xc5, 0x4a, 0x9a,
	0xd5, 0xb3, 0x78, 0x93, 0x7c, 0x8d, 0x3e, 0x03, 0xd3, 0x71, 0x6f, 0xa5, 0x2b, 0x32, 0x17, 0xad,
	0x83, 0x76, 0x6e, 0x60, 0x59, 0x56, 0xc7, 0x8c, 0x72, 0xe2, 0xae, 0x78, 0xcd, 0xf5, 0x8b, 0x67,
	0x3e, 0x59, 0xbc, 0x03, 0x80, 0x81, 0x3f, 0xa4, 0x21, 0xf1, 0xa8, 0x4f, 0xb0, 0x55, 0xe1, 0x8f,
	0x82, 0xc0, 0x23, 0xae, 0x2f, 0x79, 0xa0, 0x4b, 0x8a, 0xd7, 0xc9, 0x92, 0x2e, 0x09, 0x05, 0x06,
	0xbe, 0xc5, 0x5e, 0x3a, 0xbe, 0x94, 0x3b, 0x56, 0x58, 0xbc, 0x56, 0x6a, 0xde, 0x7a, 0xa4, 0xe6,
	0x1b, 0x6b, 0xd4, 0xbc, 0xd4, 0x6c, 0x9b, 0x4f, 0x36, 0xdb, 0x17, 0x3c, 0xb8, 0x09, 0xf1, 0x19,
	0x9d, 0x52, 0x5e, 0x23, 0x5b, 0xc5, 0x03, 0x5d, 0x42, 0xe8, 0x2b, 0xde, 0x53, 0xc2, 0x71, 0xde,
	0x58, 0x37, 0xee, 0x38, 0xc5, 0xcf, 0x64, 0x78, 0xdb, 0xe5, 0xf0, 0x72, 0x15, 0xef, 0xaa, 0xd2,
	0xea, 0x5e, 0x33, 0xb6, 0xd7, 0x6a, 0x46, 0xf4, 0x06, 0x5a, 0xdf, 0x9f, 0xfc, 0x74, 0x1a, 0x8c,
	0x5d, 0x46, 0x03, 0x1f, 0x6f, 0xa9, 0x76, 0xb5, 0x66, 0x77, 0x94, 0xe8, 0xba, 0xb3, 0x80, 0x11,
	0x8c, 0x2a, 0x5d, 0x27, 0x44, 0x8e, 0xe6, 0xf3, 0xa7, 0xc8, 0xb8, 0x58, 0xc9, 0x8c, 0x6f, 0x67,
	0x19, 0xf7, 0xf3, 0x35, 0x7a, 0x1f, 0x1a, 0x22, 0x7b, 0xcf, 0x55, 0x27, 0x35, 0x12, 0x9e, 0xb9,
	0x6f, 0xc0, 0x3e, 0xa6, 0x71, 0xe8, 0xb9, 0xe9, 0xcf, 0x24, 0x8a, 0x85, 0x67, 0x1d, 0x65, 0x71,
	0xec, 0x49, 0x85, 0x44, 0x9f, 0x83, 0x75, 0x32, 0xa1, 0x6c, 0xe8, 0x46, 0xee, 0x02, 0xbf, 0x50,
	0x1d, 0x63, 0x91, 0x82, 0x11, 0x3d, 0x30, 0x88, 0x0f, 0x6f, 0x5c, 0xe6, 0x46, 0xf8, 0x6d, 0x65,
	0x07, 0x9a, 0x34, 0x67, 0x44, 0x7f, 0x0f, 0xe2, 0x51, 0x12, 0x07, 0x18, 0x2b, 0x69, 0x83, 0x4a,
	0x02, 0x7d, 0x0d, 0x9b, 0xfd, 0x60, 0xb1, 0xe0, 0xf5, 0x8d, 0xfb, 0x41, 0xe2, 0x33, 0xbc, 0xa3,
	0x8c, 0x63, 0x73, 0x5c, 0x06, 0xc5, 0xc5, 0x1f, 0xd1, 0x05, 0x89, 0x99, 0xbb, 0x08, 0x71, 0x37,
	0xbb, 0xf8, 0xac, 0x10, 0xa0, 0x0f, 0x41, 0x3b, 0xf9, 0x8d, 0x4e, 0xf1, 0x3b, 0xaa, 0xf8, 0x34,
	0xc2, 0xd5, 0xbd, 0x3f, 0xea, 0x59, 0xa9, 0xfe, 0x83, 0x51, 0x53, 0x9e, 0x24, 0xda, 0xca, 0x24,
	0xf9, 0x18, 0xf4, 0x11, 0x65, 0x1e, 0x51, 0x0f, 0x60, 0x9d, 0x09, 0xbd, 0xb8, 0x3e, 0xfd, 0x80,
	0xc7, 0xcc, 0x13, 0x61, 0x28, 0xaf, 0xcf, 0x38, 0x23, 0x84, 0xd5, 0x73, 0x96, 0x7a, 0xc5, 0x30,
	0x7e, 0xc8, 0x6a, 0x2c, 0xf4, 0xd5, 0x54, 0x99, 0x2b, 0xa9, 0xea, 0xfd, 0xcd, 0x73, 0x20, 0xee,
	0xec, 0xff, 0x9c, 0x83, 0x4f, 0xc0, 0x38, 0x4a, 0xc6, 0xd7, 0x84, 0xa9, 0x93, 0x60, 0x5c, 0x49,
	0x40, 0x5c, 0x81, 0x1f, 0x49, 0xaa, 0xce, 0x40, 0xe3, 0x9a, 0xa4, 0xe8, 0x23, 0xd0, 0x9e, 0xf8,
	0x12, 0x69, 0x71, 0xf1, 0x15, 0x12, 0x9d, 0x1f, 0x8b, 0x9c, 0x71, 0xbf, 0x1e, 0xf9, 0x0a, 0x95,
	0x30, 0xf4, 0x2d, 0xd8, 0x77, 0xdb, 0xe4, 0x24, 0xb5, 0xe4, 0xa8, 0xe9, 0x14, 0xa3, 0xa6, 0xa2,
	0x74, 0xec, 0xb0, 0xb2, 0xde, 0x3b, 0x2b, 0xcd, 0x60, 0xb4, 0x0d, 0xcf, 0xe4, 0x2c, 0xba, 0x14,
	0xff, 0x14, 0x2e, 0xc5, 0x5f, 0x86, 0xf6, 0x5b, 0xa8, 0x03, 0x5b, 0x25, 0x61, 0x9c, 0xf2, 0xbd,
	0x8b, 0x76, 0x6d, 0x45, 0x2c, 0x2e, 0x21, 0x99, 0xb4, 0xeb, 0x7b, 0xbf, 0x56, 0xe7, 0x1e, 0x7a,
	0x01, 0x28, 0xc3, 0xc2, 0x4c, 0x50, 0x58, 0xc5, 0xf0, 0xbc, 0x2a, 0x0f, 0x93, 0x2b, 0x8f, 0x8e,
	0xb9, 0xe1, 0x1d, 0xe8, 0xac, 0x68, 0xc4, 0x2f, 0x23, 0xdc, 0xf8, 0x9f, 0xb5, 0xd5, 0x60, 0xa5,
	0x9d, 0xa5, 0xa4, 0xe2, 0xf7, 0x2b, 0xd8, 0xb9, 0xa7, 0x21, 0xb7, 0x97, 0xd2, 0x36, 0x3f, 0xe6,
	0x03, 0xd8, 0x7d, 0x48, 0x9d, 0x05, 0x92, 0x53, 0x75, 0xb4, 0x0b, 0x2f, 0x57, 0xa9, 0x0a, 0xd1,
	0x40, 0xef, 0xc1, 0x2b, 0x05, 0xe1, 0xca, 0x29, 0xd3, 0xd6, 0xae, 0x0c, 0x59, 0x89, 0x37, 0xff,
	0x06, 0x00, 0x00, 0xff, 0xff, 0xa5, 0xf1, 0xe1, 0x3e, 0x99, 0x09, 0x00, 0x00,
}
