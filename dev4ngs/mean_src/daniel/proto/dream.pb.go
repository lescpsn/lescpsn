// Code generated by protoc-gen-go.
// source: dream.proto
// DO NOT EDIT!

package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto1.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

type IncrementRequest struct {
	Id    int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Value int32 `protobuf:"varint,2,opt,name=value" json:"value,omitempty"`
}

func (m *IncrementRequest) Reset()                    { *m = IncrementRequest{} }
func (m *IncrementRequest) String() string            { return proto1.CompactTextString(m) }
func (*IncrementRequest) ProtoMessage()               {}
func (*IncrementRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

type Users struct {
	User []*User `protobuf:"bytes,1,rep,name=user" json:"user,omitempty"`
}

func (m *Users) Reset()                    { *m = Users{} }
func (m *Users) String() string            { return proto1.CompactTextString(m) }
func (*Users) ProtoMessage()               {}
func (*Users) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *Users) GetUser() []*User {
	if m != nil {
		return m.User
	}
	return nil
}

type PostUserRequest struct {
	User *User `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
}

func (m *PostUserRequest) Reset()                    { *m = PostUserRequest{} }
func (m *PostUserRequest) String() string            { return proto1.CompactTextString(m) }
func (*PostUserRequest) ProtoMessage()               {}
func (*PostUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *PostUserRequest) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

type UserResponse struct {
	Null bool  `protobuf:"varint,1,opt,name=Null,json=null" json:"Null,omitempty"`
	User *User `protobuf:"bytes,2,opt,name=User,json=user" json:"User,omitempty"`
}

func (m *UserResponse) Reset()                    { *m = UserResponse{} }
func (m *UserResponse) String() string            { return proto1.CompactTextString(m) }
func (*UserResponse) ProtoMessage()               {}
func (*UserResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

func (m *UserResponse) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

type PostAccountRequest struct {
	Username string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
	Status   Status `protobuf:"varint,3,opt,name=status,enum=proto.Status" json:"status,omitempty"`
}

func (m *PostAccountRequest) Reset()                    { *m = PostAccountRequest{} }
func (m *PostAccountRequest) String() string            { return proto1.CompactTextString(m) }
func (*PostAccountRequest) ProtoMessage()               {}
func (*PostAccountRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{5} }

type PutUserByIDRequest struct {
	Id   int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	User *User `protobuf:"bytes,2,opt,name=user" json:"user,omitempty"`
}

func (m *PutUserByIDRequest) Reset()                    { *m = PutUserByIDRequest{} }
func (m *PutUserByIDRequest) String() string            { return proto1.CompactTextString(m) }
func (*PutUserByIDRequest) ProtoMessage()               {}
func (*PutUserByIDRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{6} }

func (m *PutUserByIDRequest) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

type PutUserByUUIDRequest struct {
	UUID string `protobuf:"bytes,1,opt,name=UUID,json=uUID" json:"UUID,omitempty"`
	User *User  `protobuf:"bytes,2,opt,name=user" json:"user,omitempty"`
}

func (m *PutUserByUUIDRequest) Reset()                    { *m = PutUserByUUIDRequest{} }
func (m *PutUserByUUIDRequest) String() string            { return proto1.CompactTextString(m) }
func (*PutUserByUUIDRequest) ProtoMessage()               {}
func (*PutUserByUUIDRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{7} }

func (m *PutUserByUUIDRequest) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

type PutUserPasswordRequest struct {
	UUID     string `protobuf:"bytes,1,opt,name=UUID,json=uUID" json:"UUID,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
}

func (m *PutUserPasswordRequest) Reset()                    { *m = PutUserPasswordRequest{} }
func (m *PutUserPasswordRequest) String() string            { return proto1.CompactTextString(m) }
func (*PutUserPasswordRequest) ProtoMessage()               {}
func (*PutUserPasswordRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{8} }

type GetByIDRequest struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *GetByIDRequest) Reset()                    { *m = GetByIDRequest{} }
func (m *GetByIDRequest) String() string            { return proto1.CompactTextString(m) }
func (*GetByIDRequest) ProtoMessage()               {}
func (*GetByIDRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{9} }

type GetUserByTusoIDRequest struct {
	TusoID string `protobuf:"bytes,1,opt,name=tusoID" json:"tusoID,omitempty"`
}

func (m *GetUserByTusoIDRequest) Reset()                    { *m = GetUserByTusoIDRequest{} }
func (m *GetUserByTusoIDRequest) String() string            { return proto1.CompactTextString(m) }
func (*GetUserByTusoIDRequest) ProtoMessage()               {}
func (*GetUserByTusoIDRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{10} }

type GetByUUIDRequest struct {
	UUID string `protobuf:"bytes,1,opt,name=UUID,json=uUID" json:"UUID,omitempty"`
}

func (m *GetByUUIDRequest) Reset()                    { *m = GetByUUIDRequest{} }
func (m *GetByUUIDRequest) String() string            { return proto1.CompactTextString(m) }
func (*GetByUUIDRequest) ProtoMessage()               {}
func (*GetByUUIDRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{11} }

type GetUserByMobileRequest struct {
	Mobile string `protobuf:"bytes,1,opt,name=mobile" json:"mobile,omitempty"`
}

func (m *GetUserByMobileRequest) Reset()                    { *m = GetUserByMobileRequest{} }
func (m *GetUserByMobileRequest) String() string            { return proto1.CompactTextString(m) }
func (*GetUserByMobileRequest) ProtoMessage()               {}
func (*GetUserByMobileRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{12} }

type GetUserByEmailRequest struct {
	Email string `protobuf:"bytes,1,opt,name=email" json:"email,omitempty"`
}

func (m *GetUserByEmailRequest) Reset()                    { *m = GetUserByEmailRequest{} }
func (m *GetUserByEmailRequest) String() string            { return proto1.CompactTextString(m) }
func (*GetUserByEmailRequest) ProtoMessage()               {}
func (*GetUserByEmailRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{13} }

type GetByIDsRequest struct {
	Ids []int64 `protobuf:"varint,1,rep,name=ids" json:"ids,omitempty"`
}

func (m *GetByIDsRequest) Reset()                    { *m = GetByIDsRequest{} }
func (m *GetByIDsRequest) String() string            { return proto1.CompactTextString(m) }
func (*GetByIDsRequest) ProtoMessage()               {}
func (*GetByIDsRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{14} }

type GetByUUIDsRequest struct {
	UUIDs []string `protobuf:"bytes,1,rep,name=UUIDs,json=uUIDs" json:"UUIDs,omitempty"`
}

func (m *GetByUUIDsRequest) Reset()                    { *m = GetByUUIDsRequest{} }
func (m *GetByUUIDsRequest) String() string            { return proto1.CompactTextString(m) }
func (*GetByUUIDsRequest) ProtoMessage()               {}
func (*GetByUUIDsRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{15} }

type GetUserByMobilesRequest struct {
	Mobiles []string `protobuf:"bytes,1,rep,name=mobiles" json:"mobiles,omitempty"`
}

func (m *GetUserByMobilesRequest) Reset()                    { *m = GetUserByMobilesRequest{} }
func (m *GetUserByMobilesRequest) String() string            { return proto1.CompactTextString(m) }
func (*GetUserByMobilesRequest) ProtoMessage()               {}
func (*GetUserByMobilesRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{16} }

type FindUserRequest struct {
	QueryParameter *QueryParameter `protobuf:"bytes,1,opt,name=QueryParameter,json=queryParameter" json:"QueryParameter,omitempty"`
}

func (m *FindUserRequest) Reset()                    { *m = FindUserRequest{} }
func (m *FindUserRequest) String() string            { return proto1.CompactTextString(m) }
func (*FindUserRequest) ProtoMessage()               {}
func (*FindUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{17} }

func (m *FindUserRequest) GetQueryParameter() *QueryParameter {
	if m != nil {
		return m.QueryParameter
	}
	return nil
}

type Bool struct {
	Bool bool `protobuf:"varint,1,opt,name=Bool,json=bool" json:"Bool,omitempty"`
}

func (m *Bool) Reset()                    { *m = Bool{} }
func (m *Bool) String() string            { return proto1.CompactTextString(m) }
func (*Bool) ProtoMessage()               {}
func (*Bool) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{18} }

type PhoneRequest struct {
	Phone string `protobuf:"bytes,1,opt,name=Phone,json=phone" json:"Phone,omitempty"`
}

func (m *PhoneRequest) Reset()                    { *m = PhoneRequest{} }
func (m *PhoneRequest) String() string            { return proto1.CompactTextString(m) }
func (*PhoneRequest) ProtoMessage()               {}
func (*PhoneRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{19} }

type SockpuppetRequest struct {
	UUIDs []string `protobuf:"bytes,1,rep,name=UUIDs,json=uUIDs" json:"UUIDs,omitempty"`
}

func (m *SockpuppetRequest) Reset()                    { *m = SockpuppetRequest{} }
func (m *SockpuppetRequest) String() string            { return proto1.CompactTextString(m) }
func (*SockpuppetRequest) ProtoMessage()               {}
func (*SockpuppetRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{20} }

type UserRelationRequest struct {
	Paixuflag      int64           `protobuf:"varint,1,opt,name=Paixuflag,json=paixuflag" json:"Paixuflag,omitempty"`
	QueryParameter *QueryParameter `protobuf:"bytes,2,opt,name=QueryParameter,json=queryParameter" json:"QueryParameter,omitempty"`
}

func (m *UserRelationRequest) Reset()                    { *m = UserRelationRequest{} }
func (m *UserRelationRequest) String() string            { return proto1.CompactTextString(m) }
func (*UserRelationRequest) ProtoMessage()               {}
func (*UserRelationRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{21} }

func (m *UserRelationRequest) GetQueryParameter() *QueryParameter {
	if m != nil {
		return m.QueryParameter
	}
	return nil
}

type UserRelations struct {
	UserRelations []*UserRelation `protobuf:"bytes,1,rep,name=UserRelations,json=userRelations" json:"UserRelations,omitempty"`
}

func (m *UserRelations) Reset()                    { *m = UserRelations{} }
func (m *UserRelations) String() string            { return proto1.CompactTextString(m) }
func (*UserRelations) ProtoMessage()               {}
func (*UserRelations) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{22} }

func (m *UserRelations) GetUserRelations() []*UserRelation {
	if m != nil {
		return m.UserRelations
	}
	return nil
}

type PostRelationRequest struct {
	UserRelation *UserRelation `protobuf:"bytes,1,opt,name=UserRelation,json=userRelation" json:"UserRelation,omitempty"`
}

func (m *PostRelationRequest) Reset()                    { *m = PostRelationRequest{} }
func (m *PostRelationRequest) String() string            { return proto1.CompactTextString(m) }
func (*PostRelationRequest) ProtoMessage()               {}
func (*PostRelationRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{23} }

func (m *PostRelationRequest) GetUserRelation() *UserRelation {
	if m != nil {
		return m.UserRelation
	}
	return nil
}

type RelationResponse struct {
	Null         bool          `protobuf:"varint,1,opt,name=Null,json=null" json:"Null,omitempty"`
	UserRelation *UserRelation `protobuf:"bytes,2,opt,name=UserRelation,json=userRelation" json:"UserRelation,omitempty"`
}

func (m *RelationResponse) Reset()                    { *m = RelationResponse{} }
func (m *RelationResponse) String() string            { return proto1.CompactTextString(m) }
func (*RelationResponse) ProtoMessage()               {}
func (*RelationResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{24} }

func (m *RelationResponse) GetUserRelation() *UserRelation {
	if m != nil {
		return m.UserRelation
	}
	return nil
}

type FindByIDWithQPRequest struct {
	ID             int64           `protobuf:"varint,1,opt,name=ID,json=iD" json:"ID,omitempty"`
	QueryParameter *QueryParameter `protobuf:"bytes,2,opt,name=QueryParameter,json=queryParameter" json:"QueryParameter,omitempty"`
}

func (m *FindByIDWithQPRequest) Reset()                    { *m = FindByIDWithQPRequest{} }
func (m *FindByIDWithQPRequest) String() string            { return proto1.CompactTextString(m) }
func (*FindByIDWithQPRequest) ProtoMessage()               {}
func (*FindByIDWithQPRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{25} }

func (m *FindByIDWithQPRequest) GetQueryParameter() *QueryParameter {
	if m != nil {
		return m.QueryParameter
	}
	return nil
}

type GetRelationRequest struct {
	FromID int64 `protobuf:"varint,1,opt,name=fromID" json:"fromID,omitempty"`
	ToID   int64 `protobuf:"varint,2,opt,name=toID" json:"toID,omitempty"`
}

func (m *GetRelationRequest) Reset()                    { *m = GetRelationRequest{} }
func (m *GetRelationRequest) String() string            { return proto1.CompactTextString(m) }
func (*GetRelationRequest) ProtoMessage()               {}
func (*GetRelationRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{26} }

type UserRelationTypeResponse struct {
	UserRelatedType UserRelatedType `protobuf:"varint,1,opt,name=UserRelatedType,json=userRelatedType,enum=proto.UserRelatedType" json:"UserRelatedType,omitempty"`
}

func (m *UserRelationTypeResponse) Reset()                    { *m = UserRelationTypeResponse{} }
func (m *UserRelationTypeResponse) String() string            { return proto1.CompactTextString(m) }
func (*UserRelationTypeResponse) ProtoMessage()               {}
func (*UserRelationTypeResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{27} }

type Comments struct {
	Comments []*Comment `protobuf:"bytes,1,rep,name=Comments,json=comments" json:"Comments,omitempty"`
}

func (m *Comments) Reset()                    { *m = Comments{} }
func (m *Comments) String() string            { return proto1.CompactTextString(m) }
func (*Comments) ProtoMessage()               {}
func (*Comments) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{28} }

func (m *Comments) GetComments() []*Comment {
	if m != nil {
		return m.Comments
	}
	return nil
}

type PostCommentRequest struct {
	Comment *Comment `protobuf:"bytes,1,opt,name=Comment,json=comment" json:"Comment,omitempty"`
}

func (m *PostCommentRequest) Reset()                    { *m = PostCommentRequest{} }
func (m *PostCommentRequest) String() string            { return proto1.CompactTextString(m) }
func (*PostCommentRequest) ProtoMessage()               {}
func (*PostCommentRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{29} }

func (m *PostCommentRequest) GetComment() *Comment {
	if m != nil {
		return m.Comment
	}
	return nil
}

type CommentResponse struct {
	Null    bool     `protobuf:"varint,1,opt,name=Null,json=null" json:"Null,omitempty"`
	Comment *Comment `protobuf:"bytes,2,opt,name=Comment,json=comment" json:"Comment,omitempty"`
}

func (m *CommentResponse) Reset()                    { *m = CommentResponse{} }
func (m *CommentResponse) String() string            { return proto1.CompactTextString(m) }
func (*CommentResponse) ProtoMessage()               {}
func (*CommentResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{30} }

func (m *CommentResponse) GetComment() *Comment {
	if m != nil {
		return m.Comment
	}
	return nil
}

type FindPCWithoutOwnerRequest struct {
	Id             int64           `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	UUID           string          `protobuf:"bytes,2,opt,name=UUID,json=uUID" json:"UUID,omitempty"`
	QueryParameter *QueryParameter `protobuf:"bytes,3,opt,name=QueryParameter,json=queryParameter" json:"QueryParameter,omitempty"`
}

func (m *FindPCWithoutOwnerRequest) Reset()                    { *m = FindPCWithoutOwnerRequest{} }
func (m *FindPCWithoutOwnerRequest) String() string            { return proto1.CompactTextString(m) }
func (*FindPCWithoutOwnerRequest) ProtoMessage()               {}
func (*FindPCWithoutOwnerRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{31} }

func (m *FindPCWithoutOwnerRequest) GetQueryParameter() *QueryParameter {
	if m != nil {
		return m.QueryParameter
	}
	return nil
}

type FindPhotoReplyRequest struct {
	Id    int64    `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	UUIDs []string `protobuf:"bytes,2,rep,name=UUIDs,json=uUIDs" json:"UUIDs,omitempty"`
}

func (m *FindPhotoReplyRequest) Reset()                    { *m = FindPhotoReplyRequest{} }
func (m *FindPhotoReplyRequest) String() string            { return proto1.CompactTextString(m) }
func (*FindPhotoReplyRequest) ProtoMessage()               {}
func (*FindPhotoReplyRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{32} }

type FirstCommentRequest struct {
	UUID string `protobuf:"bytes,1,opt,name=UUID,json=uUID" json:"UUID,omitempty"`
	Id   int64  `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
}

func (m *FirstCommentRequest) Reset()                    { *m = FirstCommentRequest{} }
func (m *FirstCommentRequest) String() string            { return proto1.CompactTextString(m) }
func (*FirstCommentRequest) ProtoMessage()               {}
func (*FirstCommentRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{33} }

type PostDiaryRequest struct {
	Diary *Diary `protobuf:"bytes,1,opt,name=Diary,json=diary" json:"Diary,omitempty"`
}

func (m *PostDiaryRequest) Reset()                    { *m = PostDiaryRequest{} }
func (m *PostDiaryRequest) String() string            { return proto1.CompactTextString(m) }
func (*PostDiaryRequest) ProtoMessage()               {}
func (*PostDiaryRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{34} }

func (m *PostDiaryRequest) GetDiary() *Diary {
	if m != nil {
		return m.Diary
	}
	return nil
}

type DiaryResponse struct {
	Null  bool   `protobuf:"varint,1,opt,name=Null,json=null" json:"Null,omitempty"`
	Diary *Diary `protobuf:"bytes,2,opt,name=Diary,json=diary" json:"Diary,omitempty"`
}

func (m *DiaryResponse) Reset()                    { *m = DiaryResponse{} }
func (m *DiaryResponse) String() string            { return proto1.CompactTextString(m) }
func (*DiaryResponse) ProtoMessage()               {}
func (*DiaryResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{35} }

func (m *DiaryResponse) GetDiary() *Diary {
	if m != nil {
		return m.Diary
	}
	return nil
}

type DiaryByIDRequest struct {
	Id    int64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Diary *Diary `protobuf:"bytes,2,opt,name=Diary,json=diary" json:"Diary,omitempty"`
}

func (m *DiaryByIDRequest) Reset()                    { *m = DiaryByIDRequest{} }
func (m *DiaryByIDRequest) String() string            { return proto1.CompactTextString(m) }
func (*DiaryByIDRequest) ProtoMessage()               {}
func (*DiaryByIDRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{36} }

func (m *DiaryByIDRequest) GetDiary() *Diary {
	if m != nil {
		return m.Diary
	}
	return nil
}

type Diaries struct {
	Diaries []*Diary `protobuf:"bytes,1,rep,name=Diaries,json=diaries" json:"Diaries,omitempty"`
}

func (m *Diaries) Reset()                    { *m = Diaries{} }
func (m *Diaries) String() string            { return proto1.CompactTextString(m) }
func (*Diaries) ProtoMessage()               {}
func (*Diaries) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{37} }

func (m *Diaries) GetDiaries() []*Diary {
	if m != nil {
		return m.Diaries
	}
	return nil
}

type FindByUUIDWithQPRequest struct {
	UUID           string          `protobuf:"bytes,1,opt,name=UUID,json=uUID" json:"UUID,omitempty"`
	QueryParameter *QueryParameter `protobuf:"bytes,2,opt,name=QueryParameter,json=queryParameter" json:"QueryParameter,omitempty"`
}

func (m *FindByUUIDWithQPRequest) Reset()                    { *m = FindByUUIDWithQPRequest{} }
func (m *FindByUUIDWithQPRequest) String() string            { return proto1.CompactTextString(m) }
func (*FindByUUIDWithQPRequest) ProtoMessage()               {}
func (*FindByUUIDWithQPRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{38} }

func (m *FindByUUIDWithQPRequest) GetQueryParameter() *QueryParameter {
	if m != nil {
		return m.QueryParameter
	}
	return nil
}

type PostFeedbackRequest struct {
	Feedback *Feedback `protobuf:"bytes,1,opt,name=Feedback,json=feedback" json:"Feedback,omitempty"`
}

func (m *PostFeedbackRequest) Reset()                    { *m = PostFeedbackRequest{} }
func (m *PostFeedbackRequest) String() string            { return proto1.CompactTextString(m) }
func (*PostFeedbackRequest) ProtoMessage()               {}
func (*PostFeedbackRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{39} }

func (m *PostFeedbackRequest) GetFeedback() *Feedback {
	if m != nil {
		return m.Feedback
	}
	return nil
}

type NoteResponse struct {
	Null bool  `protobuf:"varint,1,opt,name=Null,json=null" json:"Null,omitempty"`
	Note *Note `protobuf:"bytes,2,opt,name=Note,json=note" json:"Note,omitempty"`
}

func (m *NoteResponse) Reset()                    { *m = NoteResponse{} }
func (m *NoteResponse) String() string            { return proto1.CompactTextString(m) }
func (*NoteResponse) ProtoMessage()               {}
func (*NoteResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{40} }

func (m *NoteResponse) GetNote() *Note {
	if m != nil {
		return m.Note
	}
	return nil
}

type PostNoteRequest struct {
	Note *Note `protobuf:"bytes,1,opt,name=Note,json=note" json:"Note,omitempty"`
}

func (m *PostNoteRequest) Reset()                    { *m = PostNoteRequest{} }
func (m *PostNoteRequest) String() string            { return proto1.CompactTextString(m) }
func (*PostNoteRequest) ProtoMessage()               {}
func (*PostNoteRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{41} }

func (m *PostNoteRequest) GetNote() *Note {
	if m != nil {
		return m.Note
	}
	return nil
}

type Notes struct {
	Note []*Note `protobuf:"bytes,1,rep,name=Note,json=note" json:"Note,omitempty"`
}

func (m *Notes) Reset()                    { *m = Notes{} }
func (m *Notes) String() string            { return proto1.CompactTextString(m) }
func (*Notes) ProtoMessage()               {}
func (*Notes) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{42} }

func (m *Notes) GetNote() []*Note {
	if m != nil {
		return m.Note
	}
	return nil
}

type NoteByIDRequest struct {
	Id   int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Note *Note `protobuf:"bytes,2,opt,name=Note,json=note" json:"Note,omitempty"`
}

func (m *NoteByIDRequest) Reset()                    { *m = NoteByIDRequest{} }
func (m *NoteByIDRequest) String() string            { return proto1.CompactTextString(m) }
func (*NoteByIDRequest) ProtoMessage()               {}
func (*NoteByIDRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{43} }

func (m *NoteByIDRequest) GetNote() *Note {
	if m != nil {
		return m.Note
	}
	return nil
}

type NoteByUUIDRequest struct {
	UUID string `protobuf:"bytes,1,opt,name=UUID,json=uUID" json:"UUID,omitempty"`
	Note *Note  `protobuf:"bytes,2,opt,name=Note,json=note" json:"Note,omitempty"`
}

func (m *NoteByUUIDRequest) Reset()                    { *m = NoteByUUIDRequest{} }
func (m *NoteByUUIDRequest) String() string            { return proto1.CompactTextString(m) }
func (*NoteByUUIDRequest) ProtoMessage()               {}
func (*NoteByUUIDRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{44} }

func (m *NoteByUUIDRequest) GetNote() *Note {
	if m != nil {
		return m.Note
	}
	return nil
}

type PhotoWithEchoOptionRequest struct {
	Photo           *Photo           `protobuf:"bytes,1,opt,name=Photo,json=photo" json:"Photo,omitempty"`
	PhotoEchoOption *PhotoEchoOption `protobuf:"bytes,2,opt,name=PhotoEchoOption,json=photoEchoOption" json:"PhotoEchoOption,omitempty"`
}

func (m *PhotoWithEchoOptionRequest) Reset()                    { *m = PhotoWithEchoOptionRequest{} }
func (m *PhotoWithEchoOptionRequest) String() string            { return proto1.CompactTextString(m) }
func (*PhotoWithEchoOptionRequest) ProtoMessage()               {}
func (*PhotoWithEchoOptionRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{45} }

func (m *PhotoWithEchoOptionRequest) GetPhoto() *Photo {
	if m != nil {
		return m.Photo
	}
	return nil
}

func (m *PhotoWithEchoOptionRequest) GetPhotoEchoOption() *PhotoEchoOption {
	if m != nil {
		return m.PhotoEchoOption
	}
	return nil
}

type PhotoResponse struct {
	Null  bool   `protobuf:"varint,1,opt,name=Null,json=null" json:"Null,omitempty"`
	Photo *Photo `protobuf:"bytes,2,opt,name=Photo,json=photo" json:"Photo,omitempty"`
}

func (m *PhotoResponse) Reset()                    { *m = PhotoResponse{} }
func (m *PhotoResponse) String() string            { return proto1.CompactTextString(m) }
func (*PhotoResponse) ProtoMessage()               {}
func (*PhotoResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{46} }

func (m *PhotoResponse) GetPhoto() *Photo {
	if m != nil {
		return m.Photo
	}
	return nil
}

type PhotoWithUUIDRequest struct {
	UUID            string           `protobuf:"bytes,1,opt,name=UUID,json=uUID" json:"UUID,omitempty"`
	Photo           *Photo           `protobuf:"bytes,2,opt,name=Photo,json=photo" json:"Photo,omitempty"`
	PhotoEchoOption *PhotoEchoOption `protobuf:"bytes,3,opt,name=PhotoEchoOption,json=photoEchoOption" json:"PhotoEchoOption,omitempty"`
}

func (m *PhotoWithUUIDRequest) Reset()                    { *m = PhotoWithUUIDRequest{} }
func (m *PhotoWithUUIDRequest) String() string            { return proto1.CompactTextString(m) }
func (*PhotoWithUUIDRequest) ProtoMessage()               {}
func (*PhotoWithUUIDRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{47} }

func (m *PhotoWithUUIDRequest) GetPhoto() *Photo {
	if m != nil {
		return m.Photo
	}
	return nil
}

func (m *PhotoWithUUIDRequest) GetPhotoEchoOption() *PhotoEchoOption {
	if m != nil {
		return m.PhotoEchoOption
	}
	return nil
}

type PhotoWithIDRequest struct {
	Id              int64            `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Photo           *Photo           `protobuf:"bytes,2,opt,name=Photo,json=photo" json:"Photo,omitempty"`
	PhotoEchoOption *PhotoEchoOption `protobuf:"bytes,3,opt,name=PhotoEchoOption,json=photoEchoOption" json:"PhotoEchoOption,omitempty"`
}

func (m *PhotoWithIDRequest) Reset()                    { *m = PhotoWithIDRequest{} }
func (m *PhotoWithIDRequest) String() string            { return proto1.CompactTextString(m) }
func (*PhotoWithIDRequest) ProtoMessage()               {}
func (*PhotoWithIDRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{48} }

func (m *PhotoWithIDRequest) GetPhoto() *Photo {
	if m != nil {
		return m.Photo
	}
	return nil
}

func (m *PhotoWithIDRequest) GetPhotoEchoOption() *PhotoEchoOption {
	if m != nil {
		return m.PhotoEchoOption
	}
	return nil
}

type IDAndUUIDWithEchoOptionRequest struct {
	Id              int64            `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	UUID            string           `protobuf:"bytes,2,opt,name=UUID,json=uUID" json:"UUID,omitempty"`
	PhotoEchoOption *PhotoEchoOption `protobuf:"bytes,3,opt,name=PhotoEchoOption,json=photoEchoOption" json:"PhotoEchoOption,omitempty"`
}

func (m *IDAndUUIDWithEchoOptionRequest) Reset()                    { *m = IDAndUUIDWithEchoOptionRequest{} }
func (m *IDAndUUIDWithEchoOptionRequest) String() string            { return proto1.CompactTextString(m) }
func (*IDAndUUIDWithEchoOptionRequest) ProtoMessage()               {}
func (*IDAndUUIDWithEchoOptionRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{49} }

func (m *IDAndUUIDWithEchoOptionRequest) GetPhotoEchoOption() *PhotoEchoOption {
	if m != nil {
		return m.PhotoEchoOption
	}
	return nil
}

type UUIDAndVersionWithPhotoRequest struct {
	UUID            string           `protobuf:"bytes,1,opt,name=UUID,json=uUID" json:"UUID,omitempty"`
	DVersion        int64            `protobuf:"varint,2,opt,name=dVersion" json:"dVersion,omitempty"`
	Photo           *Photo           `protobuf:"bytes,3,opt,name=Photo,json=photo" json:"Photo,omitempty"`
	PhotoEchoOption *PhotoEchoOption `protobuf:"bytes,4,opt,name=PhotoEchoOption,json=photoEchoOption" json:"PhotoEchoOption,omitempty"`
}

func (m *UUIDAndVersionWithPhotoRequest) Reset()                    { *m = UUIDAndVersionWithPhotoRequest{} }
func (m *UUIDAndVersionWithPhotoRequest) String() string            { return proto1.CompactTextString(m) }
func (*UUIDAndVersionWithPhotoRequest) ProtoMessage()               {}
func (*UUIDAndVersionWithPhotoRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{50} }

func (m *UUIDAndVersionWithPhotoRequest) GetPhoto() *Photo {
	if m != nil {
		return m.Photo
	}
	return nil
}

func (m *UUIDAndVersionWithPhotoRequest) GetPhotoEchoOption() *PhotoEchoOption {
	if m != nil {
		return m.PhotoEchoOption
	}
	return nil
}

type Photos struct {
	Photos []*Photo `protobuf:"bytes,1,rep,name=Photos,json=photos" json:"Photos,omitempty"`
}

func (m *Photos) Reset()                    { *m = Photos{} }
func (m *Photos) String() string            { return proto1.CompactTextString(m) }
func (*Photos) ProtoMessage()               {}
func (*Photos) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{51} }

func (m *Photos) GetPhotos() []*Photo {
	if m != nil {
		return m.Photos
	}
	return nil
}

type UUIDsWithEchoOptionRequest struct {
	UUIDs           []string         `protobuf:"bytes,1,rep,name=UUIDs,json=uUIDs" json:"UUIDs,omitempty"`
	PhotoEchoOption *PhotoEchoOption `protobuf:"bytes,2,opt,name=PhotoEchoOption,json=photoEchoOption" json:"PhotoEchoOption,omitempty"`
}

func (m *UUIDsWithEchoOptionRequest) Reset()                    { *m = UUIDsWithEchoOptionRequest{} }
func (m *UUIDsWithEchoOptionRequest) String() string            { return proto1.CompactTextString(m) }
func (*UUIDsWithEchoOptionRequest) ProtoMessage()               {}
func (*UUIDsWithEchoOptionRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{52} }

func (m *UUIDsWithEchoOptionRequest) GetPhotoEchoOption() *PhotoEchoOption {
	if m != nil {
		return m.PhotoEchoOption
	}
	return nil
}

type IDsWithEchoOptionRequest struct {
	Ids             []int64          `protobuf:"varint,1,rep,name=ids" json:"ids,omitempty"`
	PhotoEchoOption *PhotoEchoOption `protobuf:"bytes,2,opt,name=PhotoEchoOption,json=photoEchoOption" json:"PhotoEchoOption,omitempty"`
}

func (m *IDsWithEchoOptionRequest) Reset()                    { *m = IDsWithEchoOptionRequest{} }
func (m *IDsWithEchoOptionRequest) String() string            { return proto1.CompactTextString(m) }
func (*IDsWithEchoOptionRequest) ProtoMessage()               {}
func (*IDsWithEchoOptionRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{53} }

func (m *IDsWithEchoOptionRequest) GetPhotoEchoOption() *PhotoEchoOption {
	if m != nil {
		return m.PhotoEchoOption
	}
	return nil
}

type IDWithEchoOptionRequest struct {
	Id              int64            `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	PhotoEchoOption *PhotoEchoOption `protobuf:"bytes,2,opt,name=PhotoEchoOption,json=photoEchoOption" json:"PhotoEchoOption,omitempty"`
}

func (m *IDWithEchoOptionRequest) Reset()                    { *m = IDWithEchoOptionRequest{} }
func (m *IDWithEchoOptionRequest) String() string            { return proto1.CompactTextString(m) }
func (*IDWithEchoOptionRequest) ProtoMessage()               {}
func (*IDWithEchoOptionRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{54} }

func (m *IDWithEchoOptionRequest) GetPhotoEchoOption() *PhotoEchoOption {
	if m != nil {
		return m.PhotoEchoOption
	}
	return nil
}

type UUIDWithEchoOptionRequest struct {
	UUID            string           `protobuf:"bytes,1,opt,name=UUID,json=uUID" json:"UUID,omitempty"`
	PhotoEchoOption *PhotoEchoOption `protobuf:"bytes,2,opt,name=PhotoEchoOption,json=photoEchoOption" json:"PhotoEchoOption,omitempty"`
}

func (m *UUIDWithEchoOptionRequest) Reset()                    { *m = UUIDWithEchoOptionRequest{} }
func (m *UUIDWithEchoOptionRequest) String() string            { return proto1.CompactTextString(m) }
func (*UUIDWithEchoOptionRequest) ProtoMessage()               {}
func (*UUIDWithEchoOptionRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{55} }

func (m *UUIDWithEchoOptionRequest) GetPhotoEchoOption() *PhotoEchoOption {
	if m != nil {
		return m.PhotoEchoOption
	}
	return nil
}

type UUIDWithIdentifierRequest struct {
	UUID            string           `protobuf:"bytes,1,opt,name=UUID,json=uUID" json:"UUID,omitempty"`
	Identifier      string           `protobuf:"bytes,2,opt,name=identifier" json:"identifier,omitempty"`
	PhotoEchoOption *PhotoEchoOption `protobuf:"bytes,3,opt,name=PhotoEchoOption,json=photoEchoOption" json:"PhotoEchoOption,omitempty"`
}

func (m *UUIDWithIdentifierRequest) Reset()                    { *m = UUIDWithIdentifierRequest{} }
func (m *UUIDWithIdentifierRequest) String() string            { return proto1.CompactTextString(m) }
func (*UUIDWithIdentifierRequest) ProtoMessage()               {}
func (*UUIDWithIdentifierRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{56} }

func (m *UUIDWithIdentifierRequest) GetPhotoEchoOption() *PhotoEchoOption {
	if m != nil {
		return m.PhotoEchoOption
	}
	return nil
}

type UUIDWithOptionRequest struct {
	UUID            string           `protobuf:"bytes,1,opt,name=UUID,json=uUID" json:"UUID,omitempty"`
	QueryParameter  *QueryParameter  `protobuf:"bytes,2,opt,name=QueryParameter,json=queryParameter" json:"QueryParameter,omitempty"`
	PhotoEchoOption *PhotoEchoOption `protobuf:"bytes,3,opt,name=PhotoEchoOption,json=photoEchoOption" json:"PhotoEchoOption,omitempty"`
}

func (m *UUIDWithOptionRequest) Reset()                    { *m = UUIDWithOptionRequest{} }
func (m *UUIDWithOptionRequest) String() string            { return proto1.CompactTextString(m) }
func (*UUIDWithOptionRequest) ProtoMessage()               {}
func (*UUIDWithOptionRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{57} }

func (m *UUIDWithOptionRequest) GetQueryParameter() *QueryParameter {
	if m != nil {
		return m.QueryParameter
	}
	return nil
}

func (m *UUIDWithOptionRequest) GetPhotoEchoOption() *PhotoEchoOption {
	if m != nil {
		return m.PhotoEchoOption
	}
	return nil
}

type IDWithOptionRequest struct {
	Id              int64            `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	QueryParameter  *QueryParameter  `protobuf:"bytes,2,opt,name=QueryParameter,json=queryParameter" json:"QueryParameter,omitempty"`
	PhotoEchoOption *PhotoEchoOption `protobuf:"bytes,3,opt,name=PhotoEchoOption,json=photoEchoOption" json:"PhotoEchoOption,omitempty"`
}

func (m *IDWithOptionRequest) Reset()                    { *m = IDWithOptionRequest{} }
func (m *IDWithOptionRequest) String() string            { return proto1.CompactTextString(m) }
func (*IDWithOptionRequest) ProtoMessage()               {}
func (*IDWithOptionRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{58} }

func (m *IDWithOptionRequest) GetQueryParameter() *QueryParameter {
	if m != nil {
		return m.QueryParameter
	}
	return nil
}

func (m *IDWithOptionRequest) GetPhotoEchoOption() *PhotoEchoOption {
	if m != nil {
		return m.PhotoEchoOption
	}
	return nil
}

type PostFileRequest struct {
	File *File `protobuf:"bytes,1,opt,name=File,json=file" json:"File,omitempty"`
}

func (m *PostFileRequest) Reset()                    { *m = PostFileRequest{} }
func (m *PostFileRequest) String() string            { return proto1.CompactTextString(m) }
func (*PostFileRequest) ProtoMessage()               {}
func (*PostFileRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{59} }

func (m *PostFileRequest) GetFile() *File {
	if m != nil {
		return m.File
	}
	return nil
}

type FileResponse struct {
	File *File `protobuf:"bytes,1,opt,name=File,json=file" json:"File,omitempty"`
}

func (m *FileResponse) Reset()                    { *m = FileResponse{} }
func (m *FileResponse) String() string            { return proto1.CompactTextString(m) }
func (*FileResponse) ProtoMessage()               {}
func (*FileResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{60} }

func (m *FileResponse) GetFile() *File {
	if m != nil {
		return m.File
	}
	return nil
}

type FileWithIDRequest struct {
	Id   int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	File *File `protobuf:"bytes,2,opt,name=File,json=file" json:"File,omitempty"`
}

func (m *FileWithIDRequest) Reset()                    { *m = FileWithIDRequest{} }
func (m *FileWithIDRequest) String() string            { return proto1.CompactTextString(m) }
func (*FileWithIDRequest) ProtoMessage()               {}
func (*FileWithIDRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{61} }

func (m *FileWithIDRequest) GetFile() *File {
	if m != nil {
		return m.File
	}
	return nil
}

type FileWithUUIDRequest struct {
	UUID string `protobuf:"bytes,1,opt,name=UUID,json=uUID" json:"UUID,omitempty"`
	File *File  `protobuf:"bytes,2,opt,name=File,json=file" json:"File,omitempty"`
}

func (m *FileWithUUIDRequest) Reset()                    { *m = FileWithUUIDRequest{} }
func (m *FileWithUUIDRequest) String() string            { return proto1.CompactTextString(m) }
func (*FileWithUUIDRequest) ProtoMessage()               {}
func (*FileWithUUIDRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{62} }

func (m *FileWithUUIDRequest) GetFile() *File {
	if m != nil {
		return m.File
	}
	return nil
}

type FileWithPIDRequest struct {
	PID string `protobuf:"bytes,1,opt,name=pID" json:"pID,omitempty"`
}

func (m *FileWithPIDRequest) Reset()                    { *m = FileWithPIDRequest{} }
func (m *FileWithPIDRequest) String() string            { return proto1.CompactTextString(m) }
func (*FileWithPIDRequest) ProtoMessage()               {}
func (*FileWithPIDRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{63} }

type Files struct {
	Files []*File `protobuf:"bytes,1,rep,name=Files,json=files" json:"Files,omitempty"`
}

func (m *Files) Reset()                    { *m = Files{} }
func (m *Files) String() string            { return proto1.CompactTextString(m) }
func (*Files) ProtoMessage()               {}
func (*Files) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{64} }

func (m *Files) GetFiles() []*File {
	if m != nil {
		return m.Files
	}
	return nil
}

func init() {
	proto1.RegisterType((*Empty)(nil), "proto.Empty")
	proto1.RegisterType((*IncrementRequest)(nil), "proto.IncrementRequest")
	proto1.RegisterType((*Users)(nil), "proto.Users")
	proto1.RegisterType((*PostUserRequest)(nil), "proto.PostUserRequest")
	proto1.RegisterType((*UserResponse)(nil), "proto.UserResponse")
	proto1.RegisterType((*PostAccountRequest)(nil), "proto.PostAccountRequest")
	proto1.RegisterType((*PutUserByIDRequest)(nil), "proto.PutUserByIDRequest")
	proto1.RegisterType((*PutUserByUUIDRequest)(nil), "proto.PutUserByUUIDRequest")
	proto1.RegisterType((*PutUserPasswordRequest)(nil), "proto.PutUserPasswordRequest")
	proto1.RegisterType((*GetByIDRequest)(nil), "proto.GetByIDRequest")
	proto1.RegisterType((*GetUserByTusoIDRequest)(nil), "proto.GetUserByTusoIDRequest")
	proto1.RegisterType((*GetByUUIDRequest)(nil), "proto.GetByUUIDRequest")
	proto1.RegisterType((*GetUserByMobileRequest)(nil), "proto.GetUserByMobileRequest")
	proto1.RegisterType((*GetUserByEmailRequest)(nil), "proto.GetUserByEmailRequest")
	proto1.RegisterType((*GetByIDsRequest)(nil), "proto.GetByIDsRequest")
	proto1.RegisterType((*GetByUUIDsRequest)(nil), "proto.GetByUUIDsRequest")
	proto1.RegisterType((*GetUserByMobilesRequest)(nil), "proto.GetUserByMobilesRequest")
	proto1.RegisterType((*FindUserRequest)(nil), "proto.FindUserRequest")
	proto1.RegisterType((*Bool)(nil), "proto.Bool")
	proto1.RegisterType((*PhoneRequest)(nil), "proto.PhoneRequest")
	proto1.RegisterType((*SockpuppetRequest)(nil), "proto.SockpuppetRequest")
	proto1.RegisterType((*UserRelationRequest)(nil), "proto.UserRelationRequest")
	proto1.RegisterType((*UserRelations)(nil), "proto.UserRelations")
	proto1.RegisterType((*PostRelationRequest)(nil), "proto.PostRelationRequest")
	proto1.RegisterType((*RelationResponse)(nil), "proto.RelationResponse")
	proto1.RegisterType((*FindByIDWithQPRequest)(nil), "proto.FindByIDWithQPRequest")
	proto1.RegisterType((*GetRelationRequest)(nil), "proto.GetRelationRequest")
	proto1.RegisterType((*UserRelationTypeResponse)(nil), "proto.UserRelationTypeResponse")
	proto1.RegisterType((*Comments)(nil), "proto.Comments")
	proto1.RegisterType((*PostCommentRequest)(nil), "proto.PostCommentRequest")
	proto1.RegisterType((*CommentResponse)(nil), "proto.CommentResponse")
	proto1.RegisterType((*FindPCWithoutOwnerRequest)(nil), "proto.FindPCWithoutOwnerRequest")
	proto1.RegisterType((*FindPhotoReplyRequest)(nil), "proto.FindPhotoReplyRequest")
	proto1.RegisterType((*FirstCommentRequest)(nil), "proto.FirstCommentRequest")
	proto1.RegisterType((*PostDiaryRequest)(nil), "proto.PostDiaryRequest")
	proto1.RegisterType((*DiaryResponse)(nil), "proto.DiaryResponse")
	proto1.RegisterType((*DiaryByIDRequest)(nil), "proto.DiaryByIDRequest")
	proto1.RegisterType((*Diaries)(nil), "proto.Diaries")
	proto1.RegisterType((*FindByUUIDWithQPRequest)(nil), "proto.FindByUUIDWithQPRequest")
	proto1.RegisterType((*PostFeedbackRequest)(nil), "proto.PostFeedbackRequest")
	proto1.RegisterType((*NoteResponse)(nil), "proto.NoteResponse")
	proto1.RegisterType((*PostNoteRequest)(nil), "proto.PostNoteRequest")
	proto1.RegisterType((*Notes)(nil), "proto.Notes")
	proto1.RegisterType((*NoteByIDRequest)(nil), "proto.NoteByIDRequest")
	proto1.RegisterType((*NoteByUUIDRequest)(nil), "proto.NoteByUUIDRequest")
	proto1.RegisterType((*PhotoWithEchoOptionRequest)(nil), "proto.PhotoWithEchoOptionRequest")
	proto1.RegisterType((*PhotoResponse)(nil), "proto.PhotoResponse")
	proto1.RegisterType((*PhotoWithUUIDRequest)(nil), "proto.PhotoWithUUIDRequest")
	proto1.RegisterType((*PhotoWithIDRequest)(nil), "proto.PhotoWithIDRequest")
	proto1.RegisterType((*IDAndUUIDWithEchoOptionRequest)(nil), "proto.IDAndUUIDWithEchoOptionRequest")
	proto1.RegisterType((*UUIDAndVersionWithPhotoRequest)(nil), "proto.UUIDAndVersionWithPhotoRequest")
	proto1.RegisterType((*Photos)(nil), "proto.Photos")
	proto1.RegisterType((*UUIDsWithEchoOptionRequest)(nil), "proto.UUIDsWithEchoOptionRequest")
	proto1.RegisterType((*IDsWithEchoOptionRequest)(nil), "proto.IDsWithEchoOptionRequest")
	proto1.RegisterType((*IDWithEchoOptionRequest)(nil), "proto.IDWithEchoOptionRequest")
	proto1.RegisterType((*UUIDWithEchoOptionRequest)(nil), "proto.UUIDWithEchoOptionRequest")
	proto1.RegisterType((*UUIDWithIdentifierRequest)(nil), "proto.UUIDWithIdentifierRequest")
	proto1.RegisterType((*UUIDWithOptionRequest)(nil), "proto.UUIDWithOptionRequest")
	proto1.RegisterType((*IDWithOptionRequest)(nil), "proto.IDWithOptionRequest")
	proto1.RegisterType((*PostFileRequest)(nil), "proto.PostFileRequest")
	proto1.RegisterType((*FileResponse)(nil), "proto.FileResponse")
	proto1.RegisterType((*FileWithIDRequest)(nil), "proto.FileWithIDRequest")
	proto1.RegisterType((*FileWithUUIDRequest)(nil), "proto.FileWithUUIDRequest")
	proto1.RegisterType((*FileWithPIDRequest)(nil), "proto.FileWithPIDRequest")
	proto1.RegisterType((*Files)(nil), "proto.Files")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for DreamServices service

type DreamServicesClient interface {
	CreateSchema(ctx context.Context, in *Empty, opts ...client.CallOption) (*Empty, error)
	TearDownSchema(ctx context.Context, in *Empty, opts ...client.CallOption) (*Empty, error)
	NewMobileUser(ctx context.Context, in *PostAccountRequest, opts ...client.CallOption) (*UserResponse, error)
	NewEmailUser(ctx context.Context, in *PostAccountRequest, opts ...client.CallOption) (*UserResponse, error)
	NewAnonymousUser(ctx context.Context, in *Empty, opts ...client.CallOption) (*UserResponse, error)
	UpdateUser(ctx context.Context, in *PutUserByUUIDRequest, opts ...client.CallOption) (*UserResponse, error)
	PatchUser(ctx context.Context, in *PostUserRequest, opts ...client.CallOption) (*UserResponse, error)
	PatchUserByID(ctx context.Context, in *PutUserByIDRequest, opts ...client.CallOption) (*UserResponse, error)
	PatchUserPassword(ctx context.Context, in *PutUserPasswordRequest, opts ...client.CallOption) (*UserResponse, error)
	GetUserByEmail(ctx context.Context, in *GetUserByEmailRequest, opts ...client.CallOption) (*UserResponse, error)
	GetUserByID(ctx context.Context, in *GetByIDRequest, opts ...client.CallOption) (*UserResponse, error)
	GetUserByTusoID(ctx context.Context, in *GetUserByTusoIDRequest, opts ...client.CallOption) (*UserResponse, error)
	GetUserByIDs(ctx context.Context, in *GetByIDsRequest, opts ...client.CallOption) (*Users, error)
	GetUserByMobileNumber(ctx context.Context, in *GetUserByMobileRequest, opts ...client.CallOption) (*UserResponse, error)
	GetUserByMobileNumbers(ctx context.Context, in *GetUserByMobilesRequest, opts ...client.CallOption) (*Users, error)
	GetUserByUUID(ctx context.Context, in *GetByUUIDRequest, opts ...client.CallOption) (*UserResponse, error)
	GetUserByUUIDs(ctx context.Context, in *GetByUUIDsRequest, opts ...client.CallOption) (*Users, error)
	FindUsers(ctx context.Context, in *FindUserRequest, opts ...client.CallOption) (*Users, error)
	DeleteUserByUUID(ctx context.Context, in *GetByUUIDRequest, opts ...client.CallOption) (*Bool, error)
	DeleteUserByID(ctx context.Context, in *GetByIDRequest, opts ...client.CallOption) (*Bool, error)
	DeleteUserByPhone(ctx context.Context, in *PhoneRequest, opts ...client.CallOption) (*Empty, error)
	BatchDeleteSockpuppet(ctx context.Context, in *SockpuppetRequest, opts ...client.CallOption) (*Empty, error)
	BatchGetSockpuppet(ctx context.Context, in *SockpuppetRequest, opts ...client.CallOption) (*Users, error)
	GetAllUserRelation(ctx context.Context, in *UserRelationRequest, opts ...client.CallOption) (*Users, error)
	UpsertRelation(ctx context.Context, in *PostRelationRequest, opts ...client.CallOption) (*RelationResponse, error)
	FindUserFollowees(ctx context.Context, in *FindByIDWithQPRequest, opts ...client.CallOption) (*UserRelations, error)
	FindUserFollows(ctx context.Context, in *FindByIDWithQPRequest, opts ...client.CallOption) (*UserRelations, error)
	FindUserFriends(ctx context.Context, in *FindByIDWithQPRequest, opts ...client.CallOption) (*UserRelations, error)
	GetRelation(ctx context.Context, in *GetRelationRequest, opts ...client.CallOption) (*RelationResponse, error)
	GetRelationType(ctx context.Context, in *GetRelationRequest, opts ...client.CallOption) (*UserRelationTypeResponse, error)
	IncrementFollowees(ctx context.Context, in *IncrementRequest, opts ...client.CallOption) (*Empty, error)
	IncrementFollowers(ctx context.Context, in *IncrementRequest, opts ...client.CallOption) (*Empty, error)
	IncrementFriends(ctx context.Context, in *IncrementRequest, opts ...client.CallOption) (*Empty, error)
	IncrementImages(ctx context.Context, in *IncrementRequest, opts ...client.CallOption) (*Empty, error)
	IncrementTusos(ctx context.Context, in *IncrementRequest, opts ...client.CallOption) (*Empty, error)
	NewComment(ctx context.Context, in *PostCommentRequest, opts ...client.CallOption) (*CommentResponse, error)
	FirstCommentByID(ctx context.Context, in *GetByIDRequest, opts ...client.CallOption) (*CommentResponse, error)
	FirstCommentByUUID(ctx context.Context, in *GetByUUIDRequest, opts ...client.CallOption) (*CommentResponse, error)
	FindNewsCommentsByID(ctx context.Context, in *FindByIDWithQPRequest, opts ...client.CallOption) (*Comments, error)
	FindPCWithoutOwner(ctx context.Context, in *FindPCWithoutOwnerRequest, opts ...client.CallOption) (*Comments, error)
	FindPhotoReply(ctx context.Context, in *FindPhotoReplyRequest, opts ...client.CallOption) (*Comments, error)
	FirstCommentByUser(ctx context.Context, in *FirstCommentRequest, opts ...client.CallOption) (*CommentResponse, error)
	FirstRepliedComment(ctx context.Context, in *FirstCommentRequest, opts ...client.CallOption) (*CommentResponse, error)
	DeleteCommentByUUID(ctx context.Context, in *GetByUUIDRequest, opts ...client.CallOption) (*Bool, error)
	DeleteCommentByID(ctx context.Context, in *GetByIDRequest, opts ...client.CallOption) (*Bool, error)
	NewDiary(ctx context.Context, in *PostDiaryRequest, opts ...client.CallOption) (*DiaryResponse, error)
	UpdateDiaryByID(ctx context.Context, in *DiaryByIDRequest, opts ...client.CallOption) (*DiaryResponse, error)
	PatchDiaryByID(ctx context.Context, in *DiaryByIDRequest, opts ...client.CallOption) (*DiaryResponse, error)
	DeleteDiaryByID(ctx context.Context, in *GetByIDRequest, opts ...client.CallOption) (*DiaryResponse, error)
	DeleteDiaryByUUID(ctx context.Context, in *GetByUUIDRequest, opts ...client.CallOption) (*DiaryResponse, error)
	GetDiaryByID(ctx context.Context, in *GetByIDRequest, opts ...client.CallOption) (*DiaryResponse, error)
	GetDiaryByUUID(ctx context.Context, in *GetByUUIDRequest, opts ...client.CallOption) (*DiaryResponse, error)
	GetDiaryByIDs(ctx context.Context, in *GetByIDsRequest, opts ...client.CallOption) (*Diaries, error)
	GetDiaryByUUIDs(ctx context.Context, in *GetByUUIDsRequest, opts ...client.CallOption) (*Diaries, error)
	FindDiaryByUserUUID(ctx context.Context, in *FindByUUIDWithQPRequest, opts ...client.CallOption) (*Diaries, error)
	FindDiaryByUserID(ctx context.Context, in *FindByIDWithQPRequest, opts ...client.CallOption) (*Diaries, error)
	FindAllDiaryByUserUUID(ctx context.Context, in *GetByUUIDRequest, opts ...client.CallOption) (*Diaries, error)
	FindAllDiaryByUserID(ctx context.Context, in *GetByIDRequest, opts ...client.CallOption) (*Diaries, error)
	AddFeedBack(ctx context.Context, in *PostFeedbackRequest, opts ...client.CallOption) (*Feedback, error)
	NewNote(ctx context.Context, in *PostNoteRequest, opts ...client.CallOption) (*NoteResponse, error)
	UpdateNoteByID(ctx context.Context, in *NoteByIDRequest, opts ...client.CallOption) (*NoteResponse, error)
	PatchNoteByID(ctx context.Context, in *NoteByIDRequest, opts ...client.CallOption) (*NoteResponse, error)
	DeleteNoteByID(ctx context.Context, in *GetByIDRequest, opts ...client.CallOption) (*NoteResponse, error)
	DeleteNoteByUUID(ctx context.Context, in *GetByUUIDRequest, opts ...client.CallOption) (*NoteResponse, error)
	GetNoteByID(ctx context.Context, in *GetByIDRequest, opts ...client.CallOption) (*NoteResponse, error)
	GetNoteByUUID(ctx context.Context, in *GetByUUIDRequest, opts ...client.CallOption) (*NoteResponse, error)
	GetNoteByIDs(ctx context.Context, in *GetByIDsRequest, opts ...client.CallOption) (*Notes, error)
	GetNoteByUUIDs(ctx context.Context, in *GetByUUIDsRequest, opts ...client.CallOption) (*Notes, error)
	FindNoteByUserUUID(ctx context.Context, in *FindByUUIDWithQPRequest, opts ...client.CallOption) (*Notes, error)
	FindNoteByUserID(ctx context.Context, in *FindByIDWithQPRequest, opts ...client.CallOption) (*Notes, error)
	NewPhoto(ctx context.Context, in *PhotoWithEchoOptionRequest, opts ...client.CallOption) (*PhotoResponse, error)
	NewDisplayPhoto(ctx context.Context, in *PhotoWithUUIDRequest, opts ...client.CallOption) (*PhotoResponse, error)
	UpgradePhotoByID(ctx context.Context, in *PhotoWithIDRequest, opts ...client.CallOption) (*PhotoResponse, error)
	UpgradePhotoToUUID(ctx context.Context, in *IDAndUUIDWithEchoOptionRequest, opts ...client.CallOption) (*PhotoResponse, error)
	PatchDisplayPhotoByUUID(ctx context.Context, in *UUIDAndVersionWithPhotoRequest, opts ...client.CallOption) (*PhotoResponse, error)
	PatchPhotoByUUID(ctx context.Context, in *PhotoWithUUIDRequest, opts ...client.CallOption) (*PhotoResponse, error)
	PatchPhotoByID(ctx context.Context, in *PhotoWithIDRequest, opts ...client.CallOption) (*PhotoResponse, error)
	PublicPhotosByUUIDs(ctx context.Context, in *UUIDsWithEchoOptionRequest, opts ...client.CallOption) (*Photos, error)
	PrivatePhotosByUUIDs(ctx context.Context, in *UUIDsWithEchoOptionRequest, opts ...client.CallOption) (*Photos, error)
	DeletePhotosByUUIDs(ctx context.Context, in *UUIDsWithEchoOptionRequest, opts ...client.CallOption) (*Photos, error)
	DeletePhotoByID(ctx context.Context, in *IDWithEchoOptionRequest, opts ...client.CallOption) (*PhotoResponse, error)
	DeletePhotoByUUID(ctx context.Context, in *UUIDWithEchoOptionRequest, opts ...client.CallOption) (*PhotoResponse, error)
	FirstPhotoByID(ctx context.Context, in *IDWithEchoOptionRequest, opts ...client.CallOption) (*PhotoResponse, error)
	FirstPhotoByUserIdentifier(ctx context.Context, in *UUIDWithIdentifierRequest, opts ...client.CallOption) (*PhotoResponse, error)
	FirstPhotoByFileUUID(ctx context.Context, in *UUIDWithEchoOptionRequest, opts ...client.CallOption) (*PhotoResponse, error)
	FirstPhotoByUUID(ctx context.Context, in *UUIDWithEchoOptionRequest, opts ...client.CallOption) (*PhotoResponse, error)
	FindPhotoByIDs(ctx context.Context, in *IDsWithEchoOptionRequest, opts ...client.CallOption) (*Photos, error)
	FindPhotoByUUIDs(ctx context.Context, in *UUIDsWithEchoOptionRequest, opts ...client.CallOption) (*Photos, error)
	FindPhotosByUserUUID(ctx context.Context, in *UUIDWithOptionRequest, opts ...client.CallOption) (*Photos, error)
	FindPhotosByUserID(ctx context.Context, in *IDWithOptionRequest, opts ...client.CallOption) (*Photos, error)
	FindPublicPhotosByUserUUID(ctx context.Context, in *UUIDWithOptionRequest, opts ...client.CallOption) (*Photos, error)
	FindPublicPhotosByUserID(ctx context.Context, in *IDWithOptionRequest, opts ...client.CallOption) (*Photos, error)
	FirstPhotosWithDeleted(ctx context.Context, in *GetByUUIDRequest, opts ...client.CallOption) (*PhotoResponse, error)
	NewFile(ctx context.Context, in *PostFileRequest, opts ...client.CallOption) (*FileResponse, error)
	UpdateFileByID(ctx context.Context, in *FileWithIDRequest, opts ...client.CallOption) (*FileResponse, error)
	UpdateFileByUUID(ctx context.Context, in *FileWithUUIDRequest, opts ...client.CallOption) (*FileResponse, error)
	PatchFileByID(ctx context.Context, in *FileWithIDRequest, opts ...client.CallOption) (*FileResponse, error)
	DeleteFileByID(ctx context.Context, in *GetByIDRequest, opts ...client.CallOption) (*FileResponse, error)
	DeleteFileByUUID(ctx context.Context, in *GetByUUIDRequest, opts ...client.CallOption) (*FileResponse, error)
	GetFileByPersistentID(ctx context.Context, in *FileWithPIDRequest, opts ...client.CallOption) (*FileResponse, error)
	GetFileByID(ctx context.Context, in *GetByIDRequest, opts ...client.CallOption) (*FileResponse, error)
	GetFileByUUID(ctx context.Context, in *GetByUUIDRequest, opts ...client.CallOption) (*FileResponse, error)
	FindFileByIDs(ctx context.Context, in *GetByIDsRequest, opts ...client.CallOption) (*Files, error)
	FindFileByUUIDs(ctx context.Context, in *GetByUUIDsRequest, opts ...client.CallOption) (*Files, error)
	FindFileByUserUUID(ctx context.Context, in *FindByUUIDWithQPRequest, opts ...client.CallOption) (*Files, error)
	FindFileByUserID(ctx context.Context, in *FindByIDWithQPRequest, opts ...client.CallOption) (*Files, error)
	UpgradePhotoByFileID(ctx context.Context, in *GetByIDRequest, opts ...client.CallOption) (*Empty, error)
}

type dreamServicesClient struct {
	c           client.Client
	serviceName string
}

func NewDreamServicesClient(serviceName string, c client.Client) DreamServicesClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "proto"
	}
	return &dreamServicesClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *dreamServicesClient) CreateSchema(ctx context.Context, in *Empty, opts ...client.CallOption) (*Empty, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.CreateSchema", in)
	out := new(Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) TearDownSchema(ctx context.Context, in *Empty, opts ...client.CallOption) (*Empty, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.TearDownSchema", in)
	out := new(Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) NewMobileUser(ctx context.Context, in *PostAccountRequest, opts ...client.CallOption) (*UserResponse, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.NewMobileUser", in)
	out := new(UserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) NewEmailUser(ctx context.Context, in *PostAccountRequest, opts ...client.CallOption) (*UserResponse, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.NewEmailUser", in)
	out := new(UserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) NewAnonymousUser(ctx context.Context, in *Empty, opts ...client.CallOption) (*UserResponse, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.NewAnonymousUser", in)
	out := new(UserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) UpdateUser(ctx context.Context, in *PutUserByUUIDRequest, opts ...client.CallOption) (*UserResponse, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.UpdateUser", in)
	out := new(UserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) PatchUser(ctx context.Context, in *PostUserRequest, opts ...client.CallOption) (*UserResponse, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.PatchUser", in)
	out := new(UserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) PatchUserByID(ctx context.Context, in *PutUserByIDRequest, opts ...client.CallOption) (*UserResponse, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.PatchUserByID", in)
	out := new(UserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) PatchUserPassword(ctx context.Context, in *PutUserPasswordRequest, opts ...client.CallOption) (*UserResponse, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.PatchUserPassword", in)
	out := new(UserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) GetUserByEmail(ctx context.Context, in *GetUserByEmailRequest, opts ...client.CallOption) (*UserResponse, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.GetUserByEmail", in)
	out := new(UserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) GetUserByID(ctx context.Context, in *GetByIDRequest, opts ...client.CallOption) (*UserResponse, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.GetUserByID", in)
	out := new(UserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) GetUserByTusoID(ctx context.Context, in *GetUserByTusoIDRequest, opts ...client.CallOption) (*UserResponse, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.GetUserByTusoID", in)
	out := new(UserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) GetUserByIDs(ctx context.Context, in *GetByIDsRequest, opts ...client.CallOption) (*Users, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.GetUserByIDs", in)
	out := new(Users)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) GetUserByMobileNumber(ctx context.Context, in *GetUserByMobileRequest, opts ...client.CallOption) (*UserResponse, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.GetUserByMobileNumber", in)
	out := new(UserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) GetUserByMobileNumbers(ctx context.Context, in *GetUserByMobilesRequest, opts ...client.CallOption) (*Users, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.GetUserByMobileNumbers", in)
	out := new(Users)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) GetUserByUUID(ctx context.Context, in *GetByUUIDRequest, opts ...client.CallOption) (*UserResponse, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.GetUserByUUID", in)
	out := new(UserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) GetUserByUUIDs(ctx context.Context, in *GetByUUIDsRequest, opts ...client.CallOption) (*Users, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.GetUserByUUIDs", in)
	out := new(Users)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) FindUsers(ctx context.Context, in *FindUserRequest, opts ...client.CallOption) (*Users, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.FindUsers", in)
	out := new(Users)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) DeleteUserByUUID(ctx context.Context, in *GetByUUIDRequest, opts ...client.CallOption) (*Bool, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.DeleteUserByUUID", in)
	out := new(Bool)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) DeleteUserByID(ctx context.Context, in *GetByIDRequest, opts ...client.CallOption) (*Bool, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.DeleteUserByID", in)
	out := new(Bool)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) DeleteUserByPhone(ctx context.Context, in *PhoneRequest, opts ...client.CallOption) (*Empty, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.DeleteUserByPhone", in)
	out := new(Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) BatchDeleteSockpuppet(ctx context.Context, in *SockpuppetRequest, opts ...client.CallOption) (*Empty, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.BatchDeleteSockpuppet", in)
	out := new(Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) BatchGetSockpuppet(ctx context.Context, in *SockpuppetRequest, opts ...client.CallOption) (*Users, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.BatchGetSockpuppet", in)
	out := new(Users)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) GetAllUserRelation(ctx context.Context, in *UserRelationRequest, opts ...client.CallOption) (*Users, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.GetAllUserRelation", in)
	out := new(Users)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) UpsertRelation(ctx context.Context, in *PostRelationRequest, opts ...client.CallOption) (*RelationResponse, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.UpsertRelation", in)
	out := new(RelationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) FindUserFollowees(ctx context.Context, in *FindByIDWithQPRequest, opts ...client.CallOption) (*UserRelations, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.FindUserFollowees", in)
	out := new(UserRelations)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) FindUserFollows(ctx context.Context, in *FindByIDWithQPRequest, opts ...client.CallOption) (*UserRelations, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.FindUserFollows", in)
	out := new(UserRelations)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) FindUserFriends(ctx context.Context, in *FindByIDWithQPRequest, opts ...client.CallOption) (*UserRelations, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.FindUserFriends", in)
	out := new(UserRelations)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) GetRelation(ctx context.Context, in *GetRelationRequest, opts ...client.CallOption) (*RelationResponse, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.GetRelation", in)
	out := new(RelationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) GetRelationType(ctx context.Context, in *GetRelationRequest, opts ...client.CallOption) (*UserRelationTypeResponse, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.GetRelationType", in)
	out := new(UserRelationTypeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) IncrementFollowees(ctx context.Context, in *IncrementRequest, opts ...client.CallOption) (*Empty, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.IncrementFollowees", in)
	out := new(Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) IncrementFollowers(ctx context.Context, in *IncrementRequest, opts ...client.CallOption) (*Empty, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.IncrementFollowers", in)
	out := new(Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) IncrementFriends(ctx context.Context, in *IncrementRequest, opts ...client.CallOption) (*Empty, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.IncrementFriends", in)
	out := new(Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) IncrementImages(ctx context.Context, in *IncrementRequest, opts ...client.CallOption) (*Empty, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.IncrementImages", in)
	out := new(Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) IncrementTusos(ctx context.Context, in *IncrementRequest, opts ...client.CallOption) (*Empty, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.IncrementTusos", in)
	out := new(Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) NewComment(ctx context.Context, in *PostCommentRequest, opts ...client.CallOption) (*CommentResponse, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.NewComment", in)
	out := new(CommentResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) FirstCommentByID(ctx context.Context, in *GetByIDRequest, opts ...client.CallOption) (*CommentResponse, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.FirstCommentByID", in)
	out := new(CommentResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) FirstCommentByUUID(ctx context.Context, in *GetByUUIDRequest, opts ...client.CallOption) (*CommentResponse, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.FirstCommentByUUID", in)
	out := new(CommentResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) FindNewsCommentsByID(ctx context.Context, in *FindByIDWithQPRequest, opts ...client.CallOption) (*Comments, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.FindNewsCommentsByID", in)
	out := new(Comments)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) FindPCWithoutOwner(ctx context.Context, in *FindPCWithoutOwnerRequest, opts ...client.CallOption) (*Comments, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.FindPCWithoutOwner", in)
	out := new(Comments)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) FindPhotoReply(ctx context.Context, in *FindPhotoReplyRequest, opts ...client.CallOption) (*Comments, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.FindPhotoReply", in)
	out := new(Comments)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) FirstCommentByUser(ctx context.Context, in *FirstCommentRequest, opts ...client.CallOption) (*CommentResponse, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.FirstCommentByUser", in)
	out := new(CommentResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) FirstRepliedComment(ctx context.Context, in *FirstCommentRequest, opts ...client.CallOption) (*CommentResponse, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.FirstRepliedComment", in)
	out := new(CommentResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) DeleteCommentByUUID(ctx context.Context, in *GetByUUIDRequest, opts ...client.CallOption) (*Bool, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.DeleteCommentByUUID", in)
	out := new(Bool)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) DeleteCommentByID(ctx context.Context, in *GetByIDRequest, opts ...client.CallOption) (*Bool, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.DeleteCommentByID", in)
	out := new(Bool)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) NewDiary(ctx context.Context, in *PostDiaryRequest, opts ...client.CallOption) (*DiaryResponse, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.NewDiary", in)
	out := new(DiaryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) UpdateDiaryByID(ctx context.Context, in *DiaryByIDRequest, opts ...client.CallOption) (*DiaryResponse, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.UpdateDiaryByID", in)
	out := new(DiaryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) PatchDiaryByID(ctx context.Context, in *DiaryByIDRequest, opts ...client.CallOption) (*DiaryResponse, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.PatchDiaryByID", in)
	out := new(DiaryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) DeleteDiaryByID(ctx context.Context, in *GetByIDRequest, opts ...client.CallOption) (*DiaryResponse, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.DeleteDiaryByID", in)
	out := new(DiaryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) DeleteDiaryByUUID(ctx context.Context, in *GetByUUIDRequest, opts ...client.CallOption) (*DiaryResponse, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.DeleteDiaryByUUID", in)
	out := new(DiaryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) GetDiaryByID(ctx context.Context, in *GetByIDRequest, opts ...client.CallOption) (*DiaryResponse, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.GetDiaryByID", in)
	out := new(DiaryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) GetDiaryByUUID(ctx context.Context, in *GetByUUIDRequest, opts ...client.CallOption) (*DiaryResponse, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.GetDiaryByUUID", in)
	out := new(DiaryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) GetDiaryByIDs(ctx context.Context, in *GetByIDsRequest, opts ...client.CallOption) (*Diaries, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.GetDiaryByIDs", in)
	out := new(Diaries)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) GetDiaryByUUIDs(ctx context.Context, in *GetByUUIDsRequest, opts ...client.CallOption) (*Diaries, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.GetDiaryByUUIDs", in)
	out := new(Diaries)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) FindDiaryByUserUUID(ctx context.Context, in *FindByUUIDWithQPRequest, opts ...client.CallOption) (*Diaries, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.FindDiaryByUserUUID", in)
	out := new(Diaries)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) FindDiaryByUserID(ctx context.Context, in *FindByIDWithQPRequest, opts ...client.CallOption) (*Diaries, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.FindDiaryByUserID", in)
	out := new(Diaries)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) FindAllDiaryByUserUUID(ctx context.Context, in *GetByUUIDRequest, opts ...client.CallOption) (*Diaries, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.FindAllDiaryByUserUUID", in)
	out := new(Diaries)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) FindAllDiaryByUserID(ctx context.Context, in *GetByIDRequest, opts ...client.CallOption) (*Diaries, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.FindAllDiaryByUserID", in)
	out := new(Diaries)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) AddFeedBack(ctx context.Context, in *PostFeedbackRequest, opts ...client.CallOption) (*Feedback, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.AddFeedBack", in)
	out := new(Feedback)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) NewNote(ctx context.Context, in *PostNoteRequest, opts ...client.CallOption) (*NoteResponse, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.NewNote", in)
	out := new(NoteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) UpdateNoteByID(ctx context.Context, in *NoteByIDRequest, opts ...client.CallOption) (*NoteResponse, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.UpdateNoteByID", in)
	out := new(NoteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) PatchNoteByID(ctx context.Context, in *NoteByIDRequest, opts ...client.CallOption) (*NoteResponse, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.PatchNoteByID", in)
	out := new(NoteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) DeleteNoteByID(ctx context.Context, in *GetByIDRequest, opts ...client.CallOption) (*NoteResponse, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.DeleteNoteByID", in)
	out := new(NoteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) DeleteNoteByUUID(ctx context.Context, in *GetByUUIDRequest, opts ...client.CallOption) (*NoteResponse, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.DeleteNoteByUUID", in)
	out := new(NoteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) GetNoteByID(ctx context.Context, in *GetByIDRequest, opts ...client.CallOption) (*NoteResponse, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.GetNoteByID", in)
	out := new(NoteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) GetNoteByUUID(ctx context.Context, in *GetByUUIDRequest, opts ...client.CallOption) (*NoteResponse, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.GetNoteByUUID", in)
	out := new(NoteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) GetNoteByIDs(ctx context.Context, in *GetByIDsRequest, opts ...client.CallOption) (*Notes, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.GetNoteByIDs", in)
	out := new(Notes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) GetNoteByUUIDs(ctx context.Context, in *GetByUUIDsRequest, opts ...client.CallOption) (*Notes, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.GetNoteByUUIDs", in)
	out := new(Notes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) FindNoteByUserUUID(ctx context.Context, in *FindByUUIDWithQPRequest, opts ...client.CallOption) (*Notes, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.FindNoteByUserUUID", in)
	out := new(Notes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) FindNoteByUserID(ctx context.Context, in *FindByIDWithQPRequest, opts ...client.CallOption) (*Notes, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.FindNoteByUserID", in)
	out := new(Notes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) NewPhoto(ctx context.Context, in *PhotoWithEchoOptionRequest, opts ...client.CallOption) (*PhotoResponse, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.NewPhoto", in)
	out := new(PhotoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) NewDisplayPhoto(ctx context.Context, in *PhotoWithUUIDRequest, opts ...client.CallOption) (*PhotoResponse, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.NewDisplayPhoto", in)
	out := new(PhotoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) UpgradePhotoByID(ctx context.Context, in *PhotoWithIDRequest, opts ...client.CallOption) (*PhotoResponse, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.UpgradePhotoByID", in)
	out := new(PhotoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) UpgradePhotoToUUID(ctx context.Context, in *IDAndUUIDWithEchoOptionRequest, opts ...client.CallOption) (*PhotoResponse, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.UpgradePhotoToUUID", in)
	out := new(PhotoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) PatchDisplayPhotoByUUID(ctx context.Context, in *UUIDAndVersionWithPhotoRequest, opts ...client.CallOption) (*PhotoResponse, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.PatchDisplayPhotoByUUID", in)
	out := new(PhotoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) PatchPhotoByUUID(ctx context.Context, in *PhotoWithUUIDRequest, opts ...client.CallOption) (*PhotoResponse, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.PatchPhotoByUUID", in)
	out := new(PhotoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) PatchPhotoByID(ctx context.Context, in *PhotoWithIDRequest, opts ...client.CallOption) (*PhotoResponse, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.PatchPhotoByID", in)
	out := new(PhotoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) PublicPhotosByUUIDs(ctx context.Context, in *UUIDsWithEchoOptionRequest, opts ...client.CallOption) (*Photos, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.PublicPhotosByUUIDs", in)
	out := new(Photos)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) PrivatePhotosByUUIDs(ctx context.Context, in *UUIDsWithEchoOptionRequest, opts ...client.CallOption) (*Photos, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.PrivatePhotosByUUIDs", in)
	out := new(Photos)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) DeletePhotosByUUIDs(ctx context.Context, in *UUIDsWithEchoOptionRequest, opts ...client.CallOption) (*Photos, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.DeletePhotosByUUIDs", in)
	out := new(Photos)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) DeletePhotoByID(ctx context.Context, in *IDWithEchoOptionRequest, opts ...client.CallOption) (*PhotoResponse, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.DeletePhotoByID", in)
	out := new(PhotoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) DeletePhotoByUUID(ctx context.Context, in *UUIDWithEchoOptionRequest, opts ...client.CallOption) (*PhotoResponse, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.DeletePhotoByUUID", in)
	out := new(PhotoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) FirstPhotoByID(ctx context.Context, in *IDWithEchoOptionRequest, opts ...client.CallOption) (*PhotoResponse, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.FirstPhotoByID", in)
	out := new(PhotoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) FirstPhotoByUserIdentifier(ctx context.Context, in *UUIDWithIdentifierRequest, opts ...client.CallOption) (*PhotoResponse, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.FirstPhotoByUserIdentifier", in)
	out := new(PhotoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) FirstPhotoByFileUUID(ctx context.Context, in *UUIDWithEchoOptionRequest, opts ...client.CallOption) (*PhotoResponse, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.FirstPhotoByFileUUID", in)
	out := new(PhotoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) FirstPhotoByUUID(ctx context.Context, in *UUIDWithEchoOptionRequest, opts ...client.CallOption) (*PhotoResponse, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.FirstPhotoByUUID", in)
	out := new(PhotoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) FindPhotoByIDs(ctx context.Context, in *IDsWithEchoOptionRequest, opts ...client.CallOption) (*Photos, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.FindPhotoByIDs", in)
	out := new(Photos)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) FindPhotoByUUIDs(ctx context.Context, in *UUIDsWithEchoOptionRequest, opts ...client.CallOption) (*Photos, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.FindPhotoByUUIDs", in)
	out := new(Photos)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) FindPhotosByUserUUID(ctx context.Context, in *UUIDWithOptionRequest, opts ...client.CallOption) (*Photos, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.FindPhotosByUserUUID", in)
	out := new(Photos)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) FindPhotosByUserID(ctx context.Context, in *IDWithOptionRequest, opts ...client.CallOption) (*Photos, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.FindPhotosByUserID", in)
	out := new(Photos)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) FindPublicPhotosByUserUUID(ctx context.Context, in *UUIDWithOptionRequest, opts ...client.CallOption) (*Photos, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.FindPublicPhotosByUserUUID", in)
	out := new(Photos)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) FindPublicPhotosByUserID(ctx context.Context, in *IDWithOptionRequest, opts ...client.CallOption) (*Photos, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.FindPublicPhotosByUserID", in)
	out := new(Photos)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) FirstPhotosWithDeleted(ctx context.Context, in *GetByUUIDRequest, opts ...client.CallOption) (*PhotoResponse, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.FirstPhotosWithDeleted", in)
	out := new(PhotoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) NewFile(ctx context.Context, in *PostFileRequest, opts ...client.CallOption) (*FileResponse, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.NewFile", in)
	out := new(FileResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) UpdateFileByID(ctx context.Context, in *FileWithIDRequest, opts ...client.CallOption) (*FileResponse, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.UpdateFileByID", in)
	out := new(FileResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) UpdateFileByUUID(ctx context.Context, in *FileWithUUIDRequest, opts ...client.CallOption) (*FileResponse, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.UpdateFileByUUID", in)
	out := new(FileResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) PatchFileByID(ctx context.Context, in *FileWithIDRequest, opts ...client.CallOption) (*FileResponse, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.PatchFileByID", in)
	out := new(FileResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) DeleteFileByID(ctx context.Context, in *GetByIDRequest, opts ...client.CallOption) (*FileResponse, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.DeleteFileByID", in)
	out := new(FileResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) DeleteFileByUUID(ctx context.Context, in *GetByUUIDRequest, opts ...client.CallOption) (*FileResponse, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.DeleteFileByUUID", in)
	out := new(FileResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) GetFileByPersistentID(ctx context.Context, in *FileWithPIDRequest, opts ...client.CallOption) (*FileResponse, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.GetFileByPersistentID", in)
	out := new(FileResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) GetFileByID(ctx context.Context, in *GetByIDRequest, opts ...client.CallOption) (*FileResponse, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.GetFileByID", in)
	out := new(FileResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) GetFileByUUID(ctx context.Context, in *GetByUUIDRequest, opts ...client.CallOption) (*FileResponse, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.GetFileByUUID", in)
	out := new(FileResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) FindFileByIDs(ctx context.Context, in *GetByIDsRequest, opts ...client.CallOption) (*Files, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.FindFileByIDs", in)
	out := new(Files)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) FindFileByUUIDs(ctx context.Context, in *GetByUUIDsRequest, opts ...client.CallOption) (*Files, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.FindFileByUUIDs", in)
	out := new(Files)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) FindFileByUserUUID(ctx context.Context, in *FindByUUIDWithQPRequest, opts ...client.CallOption) (*Files, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.FindFileByUserUUID", in)
	out := new(Files)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) FindFileByUserID(ctx context.Context, in *FindByIDWithQPRequest, opts ...client.CallOption) (*Files, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.FindFileByUserID", in)
	out := new(Files)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dreamServicesClient) UpgradePhotoByFileID(ctx context.Context, in *GetByIDRequest, opts ...client.CallOption) (*Empty, error) {
	req := c.c.NewRequest(c.serviceName, "DreamServices.UpgradePhotoByFileID", in)
	out := new(Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DreamServices service

type DreamServicesHandler interface {
	CreateSchema(context.Context, *Empty, *Empty) error
	TearDownSchema(context.Context, *Empty, *Empty) error
	NewMobileUser(context.Context, *PostAccountRequest, *UserResponse) error
	NewEmailUser(context.Context, *PostAccountRequest, *UserResponse) error
	NewAnonymousUser(context.Context, *Empty, *UserResponse) error
	UpdateUser(context.Context, *PutUserByUUIDRequest, *UserResponse) error
	PatchUser(context.Context, *PostUserRequest, *UserResponse) error
	PatchUserByID(context.Context, *PutUserByIDRequest, *UserResponse) error
	PatchUserPassword(context.Context, *PutUserPasswordRequest, *UserResponse) error
	GetUserByEmail(context.Context, *GetUserByEmailRequest, *UserResponse) error
	GetUserByID(context.Context, *GetByIDRequest, *UserResponse) error
	GetUserByTusoID(context.Context, *GetUserByTusoIDRequest, *UserResponse) error
	GetUserByIDs(context.Context, *GetByIDsRequest, *Users) error
	GetUserByMobileNumber(context.Context, *GetUserByMobileRequest, *UserResponse) error
	GetUserByMobileNumbers(context.Context, *GetUserByMobilesRequest, *Users) error
	GetUserByUUID(context.Context, *GetByUUIDRequest, *UserResponse) error
	GetUserByUUIDs(context.Context, *GetByUUIDsRequest, *Users) error
	FindUsers(context.Context, *FindUserRequest, *Users) error
	DeleteUserByUUID(context.Context, *GetByUUIDRequest, *Bool) error
	DeleteUserByID(context.Context, *GetByIDRequest, *Bool) error
	DeleteUserByPhone(context.Context, *PhoneRequest, *Empty) error
	BatchDeleteSockpuppet(context.Context, *SockpuppetRequest, *Empty) error
	BatchGetSockpuppet(context.Context, *SockpuppetRequest, *Users) error
	GetAllUserRelation(context.Context, *UserRelationRequest, *Users) error
	UpsertRelation(context.Context, *PostRelationRequest, *RelationResponse) error
	FindUserFollowees(context.Context, *FindByIDWithQPRequest, *UserRelations) error
	FindUserFollows(context.Context, *FindByIDWithQPRequest, *UserRelations) error
	FindUserFriends(context.Context, *FindByIDWithQPRequest, *UserRelations) error
	GetRelation(context.Context, *GetRelationRequest, *RelationResponse) error
	GetRelationType(context.Context, *GetRelationRequest, *UserRelationTypeResponse) error
	IncrementFollowees(context.Context, *IncrementRequest, *Empty) error
	IncrementFollowers(context.Context, *IncrementRequest, *Empty) error
	IncrementFriends(context.Context, *IncrementRequest, *Empty) error
	IncrementImages(context.Context, *IncrementRequest, *Empty) error
	IncrementTusos(context.Context, *IncrementRequest, *Empty) error
	NewComment(context.Context, *PostCommentRequest, *CommentResponse) error
	FirstCommentByID(context.Context, *GetByIDRequest, *CommentResponse) error
	FirstCommentByUUID(context.Context, *GetByUUIDRequest, *CommentResponse) error
	FindNewsCommentsByID(context.Context, *FindByIDWithQPRequest, *Comments) error
	FindPCWithoutOwner(context.Context, *FindPCWithoutOwnerRequest, *Comments) error
	FindPhotoReply(context.Context, *FindPhotoReplyRequest, *Comments) error
	FirstCommentByUser(context.Context, *FirstCommentRequest, *CommentResponse) error
	FirstRepliedComment(context.Context, *FirstCommentRequest, *CommentResponse) error
	DeleteCommentByUUID(context.Context, *GetByUUIDRequest, *Bool) error
	DeleteCommentByID(context.Context, *GetByIDRequest, *Bool) error
	NewDiary(context.Context, *PostDiaryRequest, *DiaryResponse) error
	UpdateDiaryByID(context.Context, *DiaryByIDRequest, *DiaryResponse) error
	PatchDiaryByID(context.Context, *DiaryByIDRequest, *DiaryResponse) error
	DeleteDiaryByID(context.Context, *GetByIDRequest, *DiaryResponse) error
	DeleteDiaryByUUID(context.Context, *GetByUUIDRequest, *DiaryResponse) error
	GetDiaryByID(context.Context, *GetByIDRequest, *DiaryResponse) error
	GetDiaryByUUID(context.Context, *GetByUUIDRequest, *DiaryResponse) error
	GetDiaryByIDs(context.Context, *GetByIDsRequest, *Diaries) error
	GetDiaryByUUIDs(context.Context, *GetByUUIDsRequest, *Diaries) error
	FindDiaryByUserUUID(context.Context, *FindByUUIDWithQPRequest, *Diaries) error
	FindDiaryByUserID(context.Context, *FindByIDWithQPRequest, *Diaries) error
	FindAllDiaryByUserUUID(context.Context, *GetByUUIDRequest, *Diaries) error
	FindAllDiaryByUserID(context.Context, *GetByIDRequest, *Diaries) error
	AddFeedBack(context.Context, *PostFeedbackRequest, *Feedback) error
	NewNote(context.Context, *PostNoteRequest, *NoteResponse) error
	UpdateNoteByID(context.Context, *NoteByIDRequest, *NoteResponse) error
	PatchNoteByID(context.Context, *NoteByIDRequest, *NoteResponse) error
	DeleteNoteByID(context.Context, *GetByIDRequest, *NoteResponse) error
	DeleteNoteByUUID(context.Context, *GetByUUIDRequest, *NoteResponse) error
	GetNoteByID(context.Context, *GetByIDRequest, *NoteResponse) error
	GetNoteByUUID(context.Context, *GetByUUIDRequest, *NoteResponse) error
	GetNoteByIDs(context.Context, *GetByIDsRequest, *Notes) error
	GetNoteByUUIDs(context.Context, *GetByUUIDsRequest, *Notes) error
	FindNoteByUserUUID(context.Context, *FindByUUIDWithQPRequest, *Notes) error
	FindNoteByUserID(context.Context, *FindByIDWithQPRequest, *Notes) error
	NewPhoto(context.Context, *PhotoWithEchoOptionRequest, *PhotoResponse) error
	NewDisplayPhoto(context.Context, *PhotoWithUUIDRequest, *PhotoResponse) error
	UpgradePhotoByID(context.Context, *PhotoWithIDRequest, *PhotoResponse) error
	UpgradePhotoToUUID(context.Context, *IDAndUUIDWithEchoOptionRequest, *PhotoResponse) error
	PatchDisplayPhotoByUUID(context.Context, *UUIDAndVersionWithPhotoRequest, *PhotoResponse) error
	PatchPhotoByUUID(context.Context, *PhotoWithUUIDRequest, *PhotoResponse) error
	PatchPhotoByID(context.Context, *PhotoWithIDRequest, *PhotoResponse) error
	PublicPhotosByUUIDs(context.Context, *UUIDsWithEchoOptionRequest, *Photos) error
	PrivatePhotosByUUIDs(context.Context, *UUIDsWithEchoOptionRequest, *Photos) error
	DeletePhotosByUUIDs(context.Context, *UUIDsWithEchoOptionRequest, *Photos) error
	DeletePhotoByID(context.Context, *IDWithEchoOptionRequest, *PhotoResponse) error
	DeletePhotoByUUID(context.Context, *UUIDWithEchoOptionRequest, *PhotoResponse) error
	FirstPhotoByID(context.Context, *IDWithEchoOptionRequest, *PhotoResponse) error
	FirstPhotoByUserIdentifier(context.Context, *UUIDWithIdentifierRequest, *PhotoResponse) error
	FirstPhotoByFileUUID(context.Context, *UUIDWithEchoOptionRequest, *PhotoResponse) error
	FirstPhotoByUUID(context.Context, *UUIDWithEchoOptionRequest, *PhotoResponse) error
	FindPhotoByIDs(context.Context, *IDsWithEchoOptionRequest, *Photos) error
	FindPhotoByUUIDs(context.Context, *UUIDsWithEchoOptionRequest, *Photos) error
	FindPhotosByUserUUID(context.Context, *UUIDWithOptionRequest, *Photos) error
	FindPhotosByUserID(context.Context, *IDWithOptionRequest, *Photos) error
	FindPublicPhotosByUserUUID(context.Context, *UUIDWithOptionRequest, *Photos) error
	FindPublicPhotosByUserID(context.Context, *IDWithOptionRequest, *Photos) error
	FirstPhotosWithDeleted(context.Context, *GetByUUIDRequest, *PhotoResponse) error
	NewFile(context.Context, *PostFileRequest, *FileResponse) error
	UpdateFileByID(context.Context, *FileWithIDRequest, *FileResponse) error
	UpdateFileByUUID(context.Context, *FileWithUUIDRequest, *FileResponse) error
	PatchFileByID(context.Context, *FileWithIDRequest, *FileResponse) error
	DeleteFileByID(context.Context, *GetByIDRequest, *FileResponse) error
	DeleteFileByUUID(context.Context, *GetByUUIDRequest, *FileResponse) error
	GetFileByPersistentID(context.Context, *FileWithPIDRequest, *FileResponse) error
	GetFileByID(context.Context, *GetByIDRequest, *FileResponse) error
	GetFileByUUID(context.Context, *GetByUUIDRequest, *FileResponse) error
	FindFileByIDs(context.Context, *GetByIDsRequest, *Files) error
	FindFileByUUIDs(context.Context, *GetByUUIDsRequest, *Files) error
	FindFileByUserUUID(context.Context, *FindByUUIDWithQPRequest, *Files) error
	FindFileByUserID(context.Context, *FindByIDWithQPRequest, *Files) error
	UpgradePhotoByFileID(context.Context, *GetByIDRequest, *Empty) error
}

func RegisterDreamServicesHandler(s server.Server, hdlr DreamServicesHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&DreamServices{hdlr}, opts...))
}

type DreamServices struct {
	DreamServicesHandler
}

func (h *DreamServices) CreateSchema(ctx context.Context, in *Empty, out *Empty) error {
	return h.DreamServicesHandler.CreateSchema(ctx, in, out)
}

func (h *DreamServices) TearDownSchema(ctx context.Context, in *Empty, out *Empty) error {
	return h.DreamServicesHandler.TearDownSchema(ctx, in, out)
}

func (h *DreamServices) NewMobileUser(ctx context.Context, in *PostAccountRequest, out *UserResponse) error {
	return h.DreamServicesHandler.NewMobileUser(ctx, in, out)
}

func (h *DreamServices) NewEmailUser(ctx context.Context, in *PostAccountRequest, out *UserResponse) error {
	return h.DreamServicesHandler.NewEmailUser(ctx, in, out)
}

func (h *DreamServices) NewAnonymousUser(ctx context.Context, in *Empty, out *UserResponse) error {
	return h.DreamServicesHandler.NewAnonymousUser(ctx, in, out)
}

func (h *DreamServices) UpdateUser(ctx context.Context, in *PutUserByUUIDRequest, out *UserResponse) error {
	return h.DreamServicesHandler.UpdateUser(ctx, in, out)
}

func (h *DreamServices) PatchUser(ctx context.Context, in *PostUserRequest, out *UserResponse) error {
	return h.DreamServicesHandler.PatchUser(ctx, in, out)
}

func (h *DreamServices) PatchUserByID(ctx context.Context, in *PutUserByIDRequest, out *UserResponse) error {
	return h.DreamServicesHandler.PatchUserByID(ctx, in, out)
}

func (h *DreamServices) PatchUserPassword(ctx context.Context, in *PutUserPasswordRequest, out *UserResponse) error {
	return h.DreamServicesHandler.PatchUserPassword(ctx, in, out)
}

func (h *DreamServices) GetUserByEmail(ctx context.Context, in *GetUserByEmailRequest, out *UserResponse) error {
	return h.DreamServicesHandler.GetUserByEmail(ctx, in, out)
}

func (h *DreamServices) GetUserByID(ctx context.Context, in *GetByIDRequest, out *UserResponse) error {
	return h.DreamServicesHandler.GetUserByID(ctx, in, out)
}

func (h *DreamServices) GetUserByTusoID(ctx context.Context, in *GetUserByTusoIDRequest, out *UserResponse) error {
	return h.DreamServicesHandler.GetUserByTusoID(ctx, in, out)
}

func (h *DreamServices) GetUserByIDs(ctx context.Context, in *GetByIDsRequest, out *Users) error {
	return h.DreamServicesHandler.GetUserByIDs(ctx, in, out)
}

func (h *DreamServices) GetUserByMobileNumber(ctx context.Context, in *GetUserByMobileRequest, out *UserResponse) error {
	return h.DreamServicesHandler.GetUserByMobileNumber(ctx, in, out)
}

func (h *DreamServices) GetUserByMobileNumbers(ctx context.Context, in *GetUserByMobilesRequest, out *Users) error {
	return h.DreamServicesHandler.GetUserByMobileNumbers(ctx, in, out)
}

func (h *DreamServices) GetUserByUUID(ctx context.Context, in *GetByUUIDRequest, out *UserResponse) error {
	return h.DreamServicesHandler.GetUserByUUID(ctx, in, out)
}

func (h *DreamServices) GetUserByUUIDs(ctx context.Context, in *GetByUUIDsRequest, out *Users) error {
	return h.DreamServicesHandler.GetUserByUUIDs(ctx, in, out)
}

func (h *DreamServices) FindUsers(ctx context.Context, in *FindUserRequest, out *Users) error {
	return h.DreamServicesHandler.FindUsers(ctx, in, out)
}

func (h *DreamServices) DeleteUserByUUID(ctx context.Context, in *GetByUUIDRequest, out *Bool) error {
	return h.DreamServicesHandler.DeleteUserByUUID(ctx, in, out)
}

func (h *DreamServices) DeleteUserByID(ctx context.Context, in *GetByIDRequest, out *Bool) error {
	return h.DreamServicesHandler.DeleteUserByID(ctx, in, out)
}

func (h *DreamServices) DeleteUserByPhone(ctx context.Context, in *PhoneRequest, out *Empty) error {
	return h.DreamServicesHandler.DeleteUserByPhone(ctx, in, out)
}

func (h *DreamServices) BatchDeleteSockpuppet(ctx context.Context, in *SockpuppetRequest, out *Empty) error {
	return h.DreamServicesHandler.BatchDeleteSockpuppet(ctx, in, out)
}

func (h *DreamServices) BatchGetSockpuppet(ctx context.Context, in *SockpuppetRequest, out *Users) error {
	return h.DreamServicesHandler.BatchGetSockpuppet(ctx, in, out)
}

func (h *DreamServices) GetAllUserRelation(ctx context.Context, in *UserRelationRequest, out *Users) error {
	return h.DreamServicesHandler.GetAllUserRelation(ctx, in, out)
}

func (h *DreamServices) UpsertRelation(ctx context.Context, in *PostRelationRequest, out *RelationResponse) error {
	return h.DreamServicesHandler.UpsertRelation(ctx, in, out)
}

func (h *DreamServices) FindUserFollowees(ctx context.Context, in *FindByIDWithQPRequest, out *UserRelations) error {
	return h.DreamServicesHandler.FindUserFollowees(ctx, in, out)
}

func (h *DreamServices) FindUserFollows(ctx context.Context, in *FindByIDWithQPRequest, out *UserRelations) error {
	return h.DreamServicesHandler.FindUserFollows(ctx, in, out)
}

func (h *DreamServices) FindUserFriends(ctx context.Context, in *FindByIDWithQPRequest, out *UserRelations) error {
	return h.DreamServicesHandler.FindUserFriends(ctx, in, out)
}

func (h *DreamServices) GetRelation(ctx context.Context, in *GetRelationRequest, out *RelationResponse) error {
	return h.DreamServicesHandler.GetRelation(ctx, in, out)
}

func (h *DreamServices) GetRelationType(ctx context.Context, in *GetRelationRequest, out *UserRelationTypeResponse) error {
	return h.DreamServicesHandler.GetRelationType(ctx, in, out)
}

func (h *DreamServices) IncrementFollowees(ctx context.Context, in *IncrementRequest, out *Empty) error {
	return h.DreamServicesHandler.IncrementFollowees(ctx, in, out)
}

func (h *DreamServices) IncrementFollowers(ctx context.Context, in *IncrementRequest, out *Empty) error {
	return h.DreamServicesHandler.IncrementFollowers(ctx, in, out)
}

func (h *DreamServices) IncrementFriends(ctx context.Context, in *IncrementRequest, out *Empty) error {
	return h.DreamServicesHandler.IncrementFriends(ctx, in, out)
}

func (h *DreamServices) IncrementImages(ctx context.Context, in *IncrementRequest, out *Empty) error {
	return h.DreamServicesHandler.IncrementImages(ctx, in, out)
}

func (h *DreamServices) IncrementTusos(ctx context.Context, in *IncrementRequest, out *Empty) error {
	return h.DreamServicesHandler.IncrementTusos(ctx, in, out)
}

func (h *DreamServices) NewComment(ctx context.Context, in *PostCommentRequest, out *CommentResponse) error {
	return h.DreamServicesHandler.NewComment(ctx, in, out)
}

func (h *DreamServices) FirstCommentByID(ctx context.Context, in *GetByIDRequest, out *CommentResponse) error {
	return h.DreamServicesHandler.FirstCommentByID(ctx, in, out)
}

func (h *DreamServices) FirstCommentByUUID(ctx context.Context, in *GetByUUIDRequest, out *CommentResponse) error {
	return h.DreamServicesHandler.FirstCommentByUUID(ctx, in, out)
}

func (h *DreamServices) FindNewsCommentsByID(ctx context.Context, in *FindByIDWithQPRequest, out *Comments) error {
	return h.DreamServicesHandler.FindNewsCommentsByID(ctx, in, out)
}

func (h *DreamServices) FindPCWithoutOwner(ctx context.Context, in *FindPCWithoutOwnerRequest, out *Comments) error {
	return h.DreamServicesHandler.FindPCWithoutOwner(ctx, in, out)
}

func (h *DreamServices) FindPhotoReply(ctx context.Context, in *FindPhotoReplyRequest, out *Comments) error {
	return h.DreamServicesHandler.FindPhotoReply(ctx, in, out)
}

func (h *DreamServices) FirstCommentByUser(ctx context.Context, in *FirstCommentRequest, out *CommentResponse) error {
	return h.DreamServicesHandler.FirstCommentByUser(ctx, in, out)
}

func (h *DreamServices) FirstRepliedComment(ctx context.Context, in *FirstCommentRequest, out *CommentResponse) error {
	return h.DreamServicesHandler.FirstRepliedComment(ctx, in, out)
}

func (h *DreamServices) DeleteCommentByUUID(ctx context.Context, in *GetByUUIDRequest, out *Bool) error {
	return h.DreamServicesHandler.DeleteCommentByUUID(ctx, in, out)
}

func (h *DreamServices) DeleteCommentByID(ctx context.Context, in *GetByIDRequest, out *Bool) error {
	return h.DreamServicesHandler.DeleteCommentByID(ctx, in, out)
}

func (h *DreamServices) NewDiary(ctx context.Context, in *PostDiaryRequest, out *DiaryResponse) error {
	return h.DreamServicesHandler.NewDiary(ctx, in, out)
}

func (h *DreamServices) UpdateDiaryByID(ctx context.Context, in *DiaryByIDRequest, out *DiaryResponse) error {
	return h.DreamServicesHandler.UpdateDiaryByID(ctx, in, out)
}

func (h *DreamServices) PatchDiaryByID(ctx context.Context, in *DiaryByIDRequest, out *DiaryResponse) error {
	return h.DreamServicesHandler.PatchDiaryByID(ctx, in, out)
}

func (h *DreamServices) DeleteDiaryByID(ctx context.Context, in *GetByIDRequest, out *DiaryResponse) error {
	return h.DreamServicesHandler.DeleteDiaryByID(ctx, in, out)
}

func (h *DreamServices) DeleteDiaryByUUID(ctx context.Context, in *GetByUUIDRequest, out *DiaryResponse) error {
	return h.DreamServicesHandler.DeleteDiaryByUUID(ctx, in, out)
}

func (h *DreamServices) GetDiaryByID(ctx context.Context, in *GetByIDRequest, out *DiaryResponse) error {
	return h.DreamServicesHandler.GetDiaryByID(ctx, in, out)
}

func (h *DreamServices) GetDiaryByUUID(ctx context.Context, in *GetByUUIDRequest, out *DiaryResponse) error {
	return h.DreamServicesHandler.GetDiaryByUUID(ctx, in, out)
}

func (h *DreamServices) GetDiaryByIDs(ctx context.Context, in *GetByIDsRequest, out *Diaries) error {
	return h.DreamServicesHandler.GetDiaryByIDs(ctx, in, out)
}

func (h *DreamServices) GetDiaryByUUIDs(ctx context.Context, in *GetByUUIDsRequest, out *Diaries) error {
	return h.DreamServicesHandler.GetDiaryByUUIDs(ctx, in, out)
}

func (h *DreamServices) FindDiaryByUserUUID(ctx context.Context, in *FindByUUIDWithQPRequest, out *Diaries) error {
	return h.DreamServicesHandler.FindDiaryByUserUUID(ctx, in, out)
}

func (h *DreamServices) FindDiaryByUserID(ctx context.Context, in *FindByIDWithQPRequest, out *Diaries) error {
	return h.DreamServicesHandler.FindDiaryByUserID(ctx, in, out)
}

func (h *DreamServices) FindAllDiaryByUserUUID(ctx context.Context, in *GetByUUIDRequest, out *Diaries) error {
	return h.DreamServicesHandler.FindAllDiaryByUserUUID(ctx, in, out)
}

func (h *DreamServices) FindAllDiaryByUserID(ctx context.Context, in *GetByIDRequest, out *Diaries) error {
	return h.DreamServicesHandler.FindAllDiaryByUserID(ctx, in, out)
}

func (h *DreamServices) AddFeedBack(ctx context.Context, in *PostFeedbackRequest, out *Feedback) error {
	return h.DreamServicesHandler.AddFeedBack(ctx, in, out)
}

func (h *DreamServices) NewNote(ctx context.Context, in *PostNoteRequest, out *NoteResponse) error {
	return h.DreamServicesHandler.NewNote(ctx, in, out)
}

func (h *DreamServices) UpdateNoteByID(ctx context.Context, in *NoteByIDRequest, out *NoteResponse) error {
	return h.DreamServicesHandler.UpdateNoteByID(ctx, in, out)
}

func (h *DreamServices) PatchNoteByID(ctx context.Context, in *NoteByIDRequest, out *NoteResponse) error {
	return h.DreamServicesHandler.PatchNoteByID(ctx, in, out)
}

func (h *DreamServices) DeleteNoteByID(ctx context.Context, in *GetByIDRequest, out *NoteResponse) error {
	return h.DreamServicesHandler.DeleteNoteByID(ctx, in, out)
}

func (h *DreamServices) DeleteNoteByUUID(ctx context.Context, in *GetByUUIDRequest, out *NoteResponse) error {
	return h.DreamServicesHandler.DeleteNoteByUUID(ctx, in, out)
}

func (h *DreamServices) GetNoteByID(ctx context.Context, in *GetByIDRequest, out *NoteResponse) error {
	return h.DreamServicesHandler.GetNoteByID(ctx, in, out)
}

func (h *DreamServices) GetNoteByUUID(ctx context.Context, in *GetByUUIDRequest, out *NoteResponse) error {
	return h.DreamServicesHandler.GetNoteByUUID(ctx, in, out)
}

func (h *DreamServices) GetNoteByIDs(ctx context.Context, in *GetByIDsRequest, out *Notes) error {
	return h.DreamServicesHandler.GetNoteByIDs(ctx, in, out)
}

func (h *DreamServices) GetNoteByUUIDs(ctx context.Context, in *GetByUUIDsRequest, out *Notes) error {
	return h.DreamServicesHandler.GetNoteByUUIDs(ctx, in, out)
}

func (h *DreamServices) FindNoteByUserUUID(ctx context.Context, in *FindByUUIDWithQPRequest, out *Notes) error {
	return h.DreamServicesHandler.FindNoteByUserUUID(ctx, in, out)
}

func (h *DreamServices) FindNoteByUserID(ctx context.Context, in *FindByIDWithQPRequest, out *Notes) error {
	return h.DreamServicesHandler.FindNoteByUserID(ctx, in, out)
}

func (h *DreamServices) NewPhoto(ctx context.Context, in *PhotoWithEchoOptionRequest, out *PhotoResponse) error {
	return h.DreamServicesHandler.NewPhoto(ctx, in, out)
}

func (h *DreamServices) NewDisplayPhoto(ctx context.Context, in *PhotoWithUUIDRequest, out *PhotoResponse) error {
	return h.DreamServicesHandler.NewDisplayPhoto(ctx, in, out)
}

func (h *DreamServices) UpgradePhotoByID(ctx context.Context, in *PhotoWithIDRequest, out *PhotoResponse) error {
	return h.DreamServicesHandler.UpgradePhotoByID(ctx, in, out)
}

func (h *DreamServices) UpgradePhotoToUUID(ctx context.Context, in *IDAndUUIDWithEchoOptionRequest, out *PhotoResponse) error {
	return h.DreamServicesHandler.UpgradePhotoToUUID(ctx, in, out)
}

func (h *DreamServices) PatchDisplayPhotoByUUID(ctx context.Context, in *UUIDAndVersionWithPhotoRequest, out *PhotoResponse) error {
	return h.DreamServicesHandler.PatchDisplayPhotoByUUID(ctx, in, out)
}

func (h *DreamServices) PatchPhotoByUUID(ctx context.Context, in *PhotoWithUUIDRequest, out *PhotoResponse) error {
	return h.DreamServicesHandler.PatchPhotoByUUID(ctx, in, out)
}

func (h *DreamServices) PatchPhotoByID(ctx context.Context, in *PhotoWithIDRequest, out *PhotoResponse) error {
	return h.DreamServicesHandler.PatchPhotoByID(ctx, in, out)
}

func (h *DreamServices) PublicPhotosByUUIDs(ctx context.Context, in *UUIDsWithEchoOptionRequest, out *Photos) error {
	return h.DreamServicesHandler.PublicPhotosByUUIDs(ctx, in, out)
}

func (h *DreamServices) PrivatePhotosByUUIDs(ctx context.Context, in *UUIDsWithEchoOptionRequest, out *Photos) error {
	return h.DreamServicesHandler.PrivatePhotosByUUIDs(ctx, in, out)
}

func (h *DreamServices) DeletePhotosByUUIDs(ctx context.Context, in *UUIDsWithEchoOptionRequest, out *Photos) error {
	return h.DreamServicesHandler.DeletePhotosByUUIDs(ctx, in, out)
}

func (h *DreamServices) DeletePhotoByID(ctx context.Context, in *IDWithEchoOptionRequest, out *PhotoResponse) error {
	return h.DreamServicesHandler.DeletePhotoByID(ctx, in, out)
}

func (h *DreamServices) DeletePhotoByUUID(ctx context.Context, in *UUIDWithEchoOptionRequest, out *PhotoResponse) error {
	return h.DreamServicesHandler.DeletePhotoByUUID(ctx, in, out)
}

func (h *DreamServices) FirstPhotoByID(ctx context.Context, in *IDWithEchoOptionRequest, out *PhotoResponse) error {
	return h.DreamServicesHandler.FirstPhotoByID(ctx, in, out)
}

func (h *DreamServices) FirstPhotoByUserIdentifier(ctx context.Context, in *UUIDWithIdentifierRequest, out *PhotoResponse) error {
	return h.DreamServicesHandler.FirstPhotoByUserIdentifier(ctx, in, out)
}

func (h *DreamServices) FirstPhotoByFileUUID(ctx context.Context, in *UUIDWithEchoOptionRequest, out *PhotoResponse) error {
	return h.DreamServicesHandler.FirstPhotoByFileUUID(ctx, in, out)
}

func (h *DreamServices) FirstPhotoByUUID(ctx context.Context, in *UUIDWithEchoOptionRequest, out *PhotoResponse) error {
	return h.DreamServicesHandler.FirstPhotoByUUID(ctx, in, out)
}

func (h *DreamServices) FindPhotoByIDs(ctx context.Context, in *IDsWithEchoOptionRequest, out *Photos) error {
	return h.DreamServicesHandler.FindPhotoByIDs(ctx, in, out)
}

func (h *DreamServices) FindPhotoByUUIDs(ctx context.Context, in *UUIDsWithEchoOptionRequest, out *Photos) error {
	return h.DreamServicesHandler.FindPhotoByUUIDs(ctx, in, out)
}

func (h *DreamServices) FindPhotosByUserUUID(ctx context.Context, in *UUIDWithOptionRequest, out *Photos) error {
	return h.DreamServicesHandler.FindPhotosByUserUUID(ctx, in, out)
}

func (h *DreamServices) FindPhotosByUserID(ctx context.Context, in *IDWithOptionRequest, out *Photos) error {
	return h.DreamServicesHandler.FindPhotosByUserID(ctx, in, out)
}

func (h *DreamServices) FindPublicPhotosByUserUUID(ctx context.Context, in *UUIDWithOptionRequest, out *Photos) error {
	return h.DreamServicesHandler.FindPublicPhotosByUserUUID(ctx, in, out)
}

func (h *DreamServices) FindPublicPhotosByUserID(ctx context.Context, in *IDWithOptionRequest, out *Photos) error {
	return h.DreamServicesHandler.FindPublicPhotosByUserID(ctx, in, out)
}

func (h *DreamServices) FirstPhotosWithDeleted(ctx context.Context, in *GetByUUIDRequest, out *PhotoResponse) error {
	return h.DreamServicesHandler.FirstPhotosWithDeleted(ctx, in, out)
}

func (h *DreamServices) NewFile(ctx context.Context, in *PostFileRequest, out *FileResponse) error {
	return h.DreamServicesHandler.NewFile(ctx, in, out)
}

func (h *DreamServices) UpdateFileByID(ctx context.Context, in *FileWithIDRequest, out *FileResponse) error {
	return h.DreamServicesHandler.UpdateFileByID(ctx, in, out)
}

func (h *DreamServices) UpdateFileByUUID(ctx context.Context, in *FileWithUUIDRequest, out *FileResponse) error {
	return h.DreamServicesHandler.UpdateFileByUUID(ctx, in, out)
}

func (h *DreamServices) PatchFileByID(ctx context.Context, in *FileWithIDRequest, out *FileResponse) error {
	return h.DreamServicesHandler.PatchFileByID(ctx, in, out)
}

func (h *DreamServices) DeleteFileByID(ctx context.Context, in *GetByIDRequest, out *FileResponse) error {
	return h.DreamServicesHandler.DeleteFileByID(ctx, in, out)
}

func (h *DreamServices) DeleteFileByUUID(ctx context.Context, in *GetByUUIDRequest, out *FileResponse) error {
	return h.DreamServicesHandler.DeleteFileByUUID(ctx, in, out)
}

func (h *DreamServices) GetFileByPersistentID(ctx context.Context, in *FileWithPIDRequest, out *FileResponse) error {
	return h.DreamServicesHandler.GetFileByPersistentID(ctx, in, out)
}

func (h *DreamServices) GetFileByID(ctx context.Context, in *GetByIDRequest, out *FileResponse) error {
	return h.DreamServicesHandler.GetFileByID(ctx, in, out)
}

func (h *DreamServices) GetFileByUUID(ctx context.Context, in *GetByUUIDRequest, out *FileResponse) error {
	return h.DreamServicesHandler.GetFileByUUID(ctx, in, out)
}

func (h *DreamServices) FindFileByIDs(ctx context.Context, in *GetByIDsRequest, out *Files) error {
	return h.DreamServicesHandler.FindFileByIDs(ctx, in, out)
}

func (h *DreamServices) FindFileByUUIDs(ctx context.Context, in *GetByUUIDsRequest, out *Files) error {
	return h.DreamServicesHandler.FindFileByUUIDs(ctx, in, out)
}

func (h *DreamServices) FindFileByUserUUID(ctx context.Context, in *FindByUUIDWithQPRequest, out *Files) error {
	return h.DreamServicesHandler.FindFileByUserUUID(ctx, in, out)
}

func (h *DreamServices) FindFileByUserID(ctx context.Context, in *FindByIDWithQPRequest, out *Files) error {
	return h.DreamServicesHandler.FindFileByUserID(ctx, in, out)
}

func (h *DreamServices) UpgradePhotoByFileID(ctx context.Context, in *GetByIDRequest, out *Empty) error {
	return h.DreamServicesHandler.UpgradePhotoByFileID(ctx, in, out)
}

func init() { proto1.RegisterFile("dream.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 2666 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xc4, 0x59, 0x4b, 0x77, 0x1b, 0x4b,
	0x11, 0x46, 0xb2, 0x15, 0x3b, 0x65, 0x5b, 0x92, 0xc7, 0xcf, 0xe8, 0x06, 0x27, 0x19, 0xee, 0xcd,
	0x09, 0x17, 0x08, 0xe0, 0x9c, 0x93, 0xc4, 0x09, 0xce, 0xb5, 0xfc, 0x90, 0xa3, 0x84, 0x38, 0xba,
	0x72, 0x7c, 0x61, 0xc1, 0x39, 0x1c, 0x59, 0x1a, 0xc7, 0x73, 0x22, 0x69, 0x26, 0x9a, 0x51, 0x8c,
	0x37, 0x2c, 0x58, 0xb0, 0x60, 0x05, 0x7f, 0x82, 0x15, 0x6b, 0x7e, 0x06, 0xbf, 0x89, 0xae, 0x7e,
	0x4d, 0x4f, 0xcf, 0x4b, 0x0f, 0x1f, 0xd8, 0xd8, 0xea, 0x9e, 0xae, 0xaf, 0xab, 0xab, 0xab, 0xaa,
	0xbf, 0xae, 0x86, 0x85, 0xce, 0xc0, 0x6a, 0xf5, 0x1e, 0xbb, 0x03, 0xc7, 0x77, 0x8c, 0x02, 0xfd,
	0x57, 0x81, 0xa1, 0x67, 0x0d, 0x58, 0x57, 0x65, 0xc1, 0xbd, 0x24, 0xff, 0x44, 0xa3, 0x63, 0xb7,
	0x06, 0xd7, 0xbc, 0xb1, 0xd4, 0x76, 0x7a, 0x3d, 0xab, 0xef, 0xf3, 0x66, 0xf1, 0xc2, 0xb2, 0x3a,
	0xe7, 0xad, 0xf6, 0x27, 0xde, 0x5e, 0xfd, 0x3c, 0xb4, 0x06, 0xd7, 0x6e, 0x6b, 0xd0, 0xea, 0x59,
	0xbe, 0x84, 0x5b, 0xa3, 0x70, 0x56, 0xfb, 0xd2, 0x71, 0x5c, 0xdf, 0x76, 0xfa, 0xac, 0xdb, 0x9c,
	0x83, 0xc2, 0x51, 0xcf, 0xf5, 0xaf, 0xcd, 0xe7, 0x50, 0xae, 0xf7, 0xdb, 0x03, 0x0b, 0x81, 0x9b,
	0x16, 0x81, 0xf0, 0x7c, 0xa3, 0x08, 0x79, 0xbb, 0xb3, 0x99, 0xbb, 0x9f, 0x7b, 0x34, 0xd3, 0x24,
	0xbf, 0x8c, 0x55, 0x28, 0x7c, 0x69, 0x75, 0x87, 0xd6, 0x66, 0x9e, 0x74, 0x15, 0x9a, 0xac, 0x61,
	0x3e, 0x82, 0xc2, 0x19, 0x51, 0xdb, 0x33, 0xee, 0xc1, 0x2c, 0xea, 0x4f, 0x04, 0x66, 0x1e, 0x2d,
	0x6c, 0x2f, 0xb0, 0x19, 0x1e, 0xe3, 0xb7, 0x26, 0xfd, 0x60, 0x6e, 0x43, 0xa9, 0xe1, 0x78, 0x3e,
	0xed, 0xe1, 0x53, 0x04, 0x32, 0xb9, 0x78, 0x99, 0x03, 0x58, 0x64, 0xe3, 0x3d, 0xd7, 0xe9, 0x7b,
	0x96, 0x61, 0xc0, 0xec, 0xc9, 0xb0, 0xdb, 0xa5, 0x02, 0xf3, 0xcd, 0xd9, 0x3e, 0xf9, 0x8d, 0x20,
	0x38, 0x86, 0xaa, 0x15, 0x0b, 0xe2, 0x81, 0x81, 0x13, 0x57, 0xdb, 0x6d, 0x67, 0x18, 0x2c, 0xaf,
	0x02, 0xf3, 0xf8, 0xb5, 0x4f, 0xec, 0x44, 0xe1, 0x6e, 0x37, 0x65, 0x1b, 0xbf, 0xb9, 0x2d, 0xcf,
	0xbb, 0x72, 0x06, 0x1d, 0x0a, 0x4b, 0xbe, 0x89, 0xb6, 0xf1, 0x0d, 0xdc, 0xf2, 0xfc, 0x96, 0x3f,
	0xf4, 0x36, 0x67, 0xc8, 0x97, 0xe2, 0xf6, 0x12, 0x9f, 0xf0, 0x94, 0x76, 0x36, 0xf9, 0x47, 0xf3,
	0x88, 0x4c, 0x3a, 0xa4, 0x8b, 0xdd, 0xbf, 0xae, 0x1f, 0x26, 0xd9, 0x54, 0x18, 0x20, 0x51, 0xf7,
	0xb7, 0xb0, 0x2a, 0x61, 0xce, 0xce, 0x02, 0x20, 0x62, 0x08, 0x6c, 0x72, 0xcd, 0x67, 0x87, 0xe4,
	0x77, 0x36, 0xd8, 0x6b, 0x58, 0xe7, 0x60, 0x0d, 0xbe, 0x9a, 0x34, 0xb8, 0x14, 0x23, 0x98, 0xf7,
	0xa1, 0x78, 0x6c, 0xf9, 0x29, 0x2b, 0x33, 0x7f, 0x05, 0xeb, 0x64, 0x04, 0x53, 0xfc, 0xc3, 0xd0,
	0x73, 0x82, 0x91, 0xeb, 0x70, 0xcb, 0xa7, 0x1d, 0x7c, 0x36, 0xde, 0x32, 0x1f, 0x42, 0x99, 0x62,
	0x66, 0x2c, 0x33, 0x84, 0xfc, 0xce, 0x39, 0xb7, 0xbb, 0x96, 0x82, 0xdc, 0xa3, 0x1d, 0x02, 0x99,
	0xb5, 0xcc, 0x5f, 0xc0, 0x9a, 0x94, 0x38, 0xea, 0xb5, 0xec, 0xae, 0x10, 0x20, 0x2e, 0x6d, 0x61,
	0x9b, 0x8f, 0x67, 0x0d, 0xf3, 0x27, 0x50, 0xe2, 0x8b, 0xf3, 0xc4, 0xc0, 0x32, 0xcc, 0xd8, 0x1d,
	0x8f, 0xfa, 0xf6, 0x4c, 0x13, 0x7f, 0x9a, 0x3f, 0x85, 0x65, 0xa9, 0xad, 0xa7, 0xe0, 0xd1, 0x36,
	0x1d, 0x48, 0xf0, 0x50, 0x5f, 0xcf, 0x7c, 0x02, 0x1b, 0x9a, 0xc2, 0x52, 0x60, 0x13, 0xe6, 0x98,
	0x8e, 0x42, 0x44, 0x34, 0xcd, 0x06, 0x94, 0x6a, 0x76, 0xbf, 0xa3, 0x46, 0xcb, 0x2e, 0x14, 0xbf,
	0xc7, 0xe0, 0x6e, 0x88, 0xe0, 0xe6, 0x71, 0xb3, 0xc6, 0x77, 0x3a, 0xfc, 0xb1, 0x59, 0xfc, 0x1c,
	0x6a, 0x9b, 0x15, 0x98, 0xdd, 0x77, 0x9c, 0x2e, 0xda, 0x14, 0xff, 0x8b, 0x18, 0x3a, 0x27, 0xbf,
	0xcd, 0xaf, 0x61, 0xb1, 0x71, 0xe9, 0xf4, 0x2d, 0x65, 0x21, 0xb4, 0x2d, 0x0c, 0xe3, 0x62, 0x03,
	0xd7, 0x7c, 0xea, 0xb4, 0x3f, 0xb9, 0x43, 0xd7, 0xb5, 0xfc, 0xf4, 0x35, 0x0f, 0x60, 0x85, 0xa9,
	0xde, 0x6d, 0x61, 0xbe, 0x11, 0x83, 0xef, 0xc2, 0xed, 0x46, 0xcb, 0xfe, 0xd3, 0xf0, 0xa2, 0xdb,
	0xfa, 0xc8, 0x9d, 0xe5, 0xb6, 0x2b, 0x3a, 0x62, 0x16, 0x98, 0x1f, 0x67, 0x81, 0x6f, 0x60, 0x49,
	0x9d, 0xd3, 0x33, 0x76, 0xb4, 0x0e, 0x9e, 0x9b, 0x56, 0xd4, 0xc8, 0x10, 0x0a, 0x2e, 0x0d, 0xd5,
	0x91, 0xe6, 0x09, 0xac, 0x60, 0xce, 0xd0, 0xf5, 0x7f, 0x26, 0xf2, 0x11, 0xeb, 0xe6, 0x1b, 0x10,
	0x0b, 0xb8, 0xa8, 0x02, 0x9a, 0x7f, 0x84, 0x72, 0x80, 0x95, 0x92, 0xcc, 0xf4, 0x09, 0xf2, 0xa3,
	0x4e, 0x70, 0x01, 0x6b, 0xe8, 0x2f, 0xe8, 0xb5, 0xbf, 0xb3, 0xfd, 0xcb, 0xef, 0x1b, 0x4a, 0x60,
	0xf2, 0x00, 0xc2, 0xc0, 0x3c, 0x9c, 0xd6, 0xc8, 0x7b, 0x60, 0x1c, 0x5b, 0x11, 0xbb, 0x90, 0xc8,
	0xbb, 0x18, 0x38, 0x3d, 0x39, 0x11, 0x6f, 0xe1, 0x12, 0x7d, 0x8c, 0xf4, 0x3c, 0xed, 0xa5, 0xbf,
	0xcd, 0x3f, 0xc0, 0xa6, 0xba, 0x8e, 0x0f, 0xd7, 0xae, 0x25, 0x4d, 0xb2, 0x07, 0x25, 0xf9, 0xcd,
	0xea, 0xe0, 0x27, 0x0a, 0x58, 0xdc, 0x5e, 0xd7, 0x2d, 0xc0, 0xbe, 0x36, 0x4b, 0xc3, 0x70, 0x87,
	0xf9, 0x14, 0xe6, 0x0f, 0xd8, 0x01, 0xe9, 0x19, 0xdf, 0x06, 0xbf, 0xf9, 0xd6, 0x17, 0x39, 0x0c,
	0xef, 0x6e, 0xce, 0xf3, 0xc3, 0xd4, 0x33, 0x5f, 0xb1, 0x43, 0x42, 0x7c, 0xe0, 0xeb, 0x7a, 0x04,
	0x73, 0xbc, 0x87, 0x6f, 0xb5, 0x0e, 0x30, 0xc7, 0x01, 0xcc, 0xf7, 0x50, 0x92, 0xb2, 0x29, 0xfb,
	0xab, 0x00, 0xe6, 0xd3, 0x01, 0xff, 0x0c, 0x77, 0x70, 0x43, 0x1b, 0x07, 0xb8, 0x9d, 0xce, 0xd0,
	0x7f, 0x7f, 0xd5, 0x0f, 0x52, 0x81, 0x7e, 0x8e, 0x88, 0x3c, 0x99, 0x57, 0xf2, 0x77, 0x74, 0xa3,
	0x67, 0xc6, 0xd9, 0xe8, 0x5d, 0xe6, 0x50, 0x0d, 0x24, 0x0e, 0x4d, 0xcb, 0xed, 0x5e, 0xa7, 0xf0,
	0x02, 0x96, 0x00, 0xf2, 0x6a, 0x02, 0xd8, 0x81, 0x95, 0x9a, 0x3d, 0x88, 0x18, 0x34, 0xee, 0xa0,
	0x61, 0x80, 0x79, 0x79, 0x74, 0x3c, 0x85, 0x32, 0x6e, 0xc5, 0x21, 0x92, 0x1e, 0x21, 0x67, 0x42,
	0x81, 0xb6, 0xf9, 0x36, 0x2c, 0xf2, 0x35, 0xb0, 0x31, 0x05, 0xca, 0x8f, 0xcc, 0x63, 0x58, 0xe2,
	0x32, 0x29, 0x1b, 0x20, 0x81, 0xf2, 0xc9, 0x40, 0x35, 0x28, 0xd3, 0x76, 0xda, 0xc9, 0x3d, 0x0a,
	0xce, 0xaf, 0x61, 0x0e, 0xdb, 0xb6, 0xe5, 0x19, 0x0f, 0xe5, 0x4f, 0xee, 0x89, 0x61, 0x81, 0xb9,
	0x0e, 0xfb, 0x68, 0x76, 0x61, 0x83, 0x85, 0x31, 0x5a, 0x29, 0x1c, 0xc8, 0x71, 0xa6, 0x9b, 0x32,
	0x98, 0xf7, 0x59, 0x96, 0xab, 0x71, 0x0a, 0x29, 0x66, 0xfa, 0x19, 0xcc, 0x8b, 0x2e, 0x6e, 0xef,
	0x12, 0xc7, 0x93, 0x23, 0xe7, 0x05, 0xed, 0x44, 0x8a, 0x76, 0xe2, 0xf8, 0x56, 0x16, 0x45, 0xc3,
	0x31, 0x1a, 0x33, 0xa1, 0x62, 0xb3, 0x7d, 0xf2, 0x57, 0x70, 0x43, 0x06, 0x24, 0xb9, 0x21, 0x95,
	0xc9, 0x25, 0xc9, 0x10, 0xe6, 0x89, 0x2d, 0x4f, 0x19, 0x39, 0x13, 0x3f, 0x72, 0x1f, 0x4a, 0xd8,
	0xca, 0x20, 0x62, 0xe9, 0x1a, 0xbe, 0x86, 0x65, 0x86, 0x31, 0x02, 0x0b, 0x4b, 0x47, 0xfa, 0x4b,
	0x0e, 0x2a, 0x34, 0xaa, 0x70, 0x7b, 0x8f, 0x08, 0x25, 0x7f, 0xef, 0xaa, 0xa9, 0xd4, 0xa4, 0x47,
	0xaf, 0xef, 0x68, 0x9e, 0xce, 0xe2, 0xb0, 0x40, 0x79, 0x3c, 0xa6, 0x49, 0xda, 0x0e, 0xa4, 0xf9,
	0x74, 0xeb, 0xea, 0x68, 0x05, 0xbb, 0xe4, 0x86, 0x3b, 0x30, 0x56, 0x78, 0x64, 0xa7, 0xc7, 0x0a,
	0x53, 0x25, 0x9f, 0xa8, 0x8a, 0xf9, 0xf7, 0x1c, 0x61, 0xa8, 0x62, 0x35, 0x59, 0xb6, 0x19, 0x01,
	0x30, 0x6e, 0x6d, 0x33, 0xe3, 0xad, 0xed, 0x6f, 0x39, 0x92, 0xcb, 0x85, 0x4a, 0xa9, 0x11, 0xfc,
	0x3f, 0x50, 0xe6, 0xaf, 0x39, 0xd8, 0xaa, 0x1f, 0x56, 0x09, 0x93, 0xe3, 0x01, 0x1d, 0xdd, 0xf1,
	0x51, 0x92, 0xf9, 0xf4, 0x8a, 0xfc, 0x9b, 0x28, 0x82, 0xb0, 0x44, 0x95, 0x1f, 0xc8, 0x7d, 0x8d,
	0x74, 0xa1, 0x36, 0xdc, 0x09, 0x52, 0x6f, 0x01, 0x62, 0x3c, 0x4f, 0xd1, 0xb2, 0x1d, 0x58, 0x70,
	0x66, 0x2c, 0x0b, 0xce, 0x8e, 0xa7, 0xf8, 0x63, 0xb8, 0x45, 0xc7, 0x78, 0xc6, 0xd7, 0xe2, 0x97,
	0x96, 0x43, 0xd9, 0x84, 0xb7, 0xa8, 0xa0, 0x67, 0xfa, 0x50, 0xa1, 0xe7, 0x51, 0xbc, 0xb1, 0x63,
	0xe9, 0xea, 0x0d, 0x04, 0x54, 0x1f, 0x36, 0x13, 0xe7, 0x8c, 0xdc, 0x1e, 0x6e, 0x60, 0xbe, 0x4f,
	0xb0, 0x31, 0xaa, 0x3f, 0x4d, 0x3f, 0xd9, 0x67, 0xb8, 0x93, 0xec, 0xbe, 0x71, 0x5e, 0x33, 0xfd,
	0x94, 0xff, 0xc8, 0x05, 0x73, 0xd6, 0x3b, 0x84, 0x41, 0xd8, 0x17, 0x76, 0xc0, 0x7f, 0xe2, 0xe6,
	0xdc, 0x02, 0xb0, 0xe5, 0x40, 0x1e, 0x3c, 0x4a, 0xcf, 0x0d, 0x84, 0xd0, 0xbf, 0x72, 0xb0, 0x26,
	0x74, 0xca, 0xb6, 0xc1, 0x74, 0x67, 0xf3, 0x0d, 0xa8, 0xfb, 0xcf, 0x1c, 0xac, 0xc4, 0x29, 0xab,
	0xfb, 0xc7, 0xff, 0x5d, 0x51, 0x7e, 0xfa, 0xd7, 0x94, 0xab, 0x3c, 0x39, 0x45, 0x6b, 0xe2, 0x22,
	0x1f, 0x9c, 0xa2, 0x74, 0xc4, 0xec, 0x05, 0xde, 0xe9, 0x7f, 0x09, 0x8b, 0x6c, 0x3c, 0x3f, 0xbf,
	0x32, 0x05, 0x0e, 0x61, 0x19, 0x5b, 0xe9, 0x67, 0x82, 0x40, 0xc9, 0x27, 0xa1, 0xbc, 0x41, 0x5a,
	0xcb, 0x50, 0x46, 0x20, 0x02, 0xe9, 0x58, 0x0f, 0xc1, 0x10, 0x58, 0x8d, 0x00, 0x8a, 0x24, 0x0b,
	0x57, 0x22, 0xe1, 0x4f, 0xf3, 0x5b, 0x28, 0xe0, 0x38, 0xcf, 0x78, 0xc0, 0x7f, 0x68, 0x4c, 0x87,
	0x42, 0x16, 0x10, 0xd2, 0xdb, 0xfe, 0xcf, 0x73, 0x42, 0x82, 0xb1, 0xb4, 0x78, 0x6a, 0x0d, 0xbe,
	0xd8, 0x6d, 0x22, 0xf4, 0x73, 0x58, 0x3c, 0x20, 0x1d, 0xbe, 0x75, 0xda, 0xbe, 0xb4, 0x7a, 0x2d,
	0x43, 0x24, 0x4d, 0x5a, 0xf8, 0xab, 0x84, 0x5a, 0xe6, 0x8f, 0x8c, 0xc7, 0x50, 0xfc, 0x60, 0xb5,
	0x06, 0x87, 0xce, 0x55, 0x7f, 0xa4, 0xf1, 0x55, 0x58, 0x3a, 0xb1, 0xae, 0x58, 0x55, 0x03, 0xef,
	0x66, 0xc6, 0x1d, 0xb1, 0xe9, 0x91, 0x8a, 0x5b, 0x25, 0x7c, 0x8b, 0x65, 0xfb, 0x46, 0x20, 0xf6,
	0x08, 0x81, 0xb4, 0xae, 0x68, 0x5d, 0x66, 0x42, 0x84, 0x67, 0x50, 0x26, 0x08, 0xd5, 0xbe, 0xd3,
	0xbf, 0xee, 0x39, 0x43, 0x8f, 0xa2, 0x84, 0xd5, 0x4e, 0x9c, 0x1a, 0xce, 0xdc, 0x0e, 0xb1, 0x0d,
	0x15, 0xf9, 0x4a, 0x4c, 0x1c, 0x53, 0x70, 0x4b, 0x42, 0x78, 0x81, 0x05, 0x0d, 0xbf, 0x7d, 0x49,
	0x01, 0xd6, 0x15, 0xcd, 0x95, 0xc2, 0x4d, 0x92, 0x2c, 0xb1, 0x9d, 0x94, 0x45, 0x6e, 0x1a, 0xac,
	0x3c, 0x52, 0x38, 0x4c, 0x82, 0xa8, 0xc3, 0xb2, 0x84, 0x10, 0x35, 0x3d, 0xe3, 0xc7, 0x61, 0x18,
	0xad, 0xd6, 0x97, 0x04, 0x75, 0x44, 0x4b, 0x7a, 0x4a, 0x91, 0xcc, 0xb8, 0xcb, 0x07, 0xc6, 0xd6,
	0xce, 0x92, 0x60, 0x5e, 0xc2, 0x82, 0x1c, 0x4f, 0x96, 0xb4, 0x16, 0x60, 0x8c, 0xb0, 0x9c, 0x63,
	0x5a, 0x79, 0x53, 0x8b, 0x86, 0x72, 0x31, 0xf1, 0xc5, 0xc4, 0x24, 0xa0, 0xa7, 0xb0, 0xa8, 0x68,
	0xe1, 0xc9, 0x9d, 0xd1, 0xea, 0x7a, 0xd2, 0x9d, 0x69, 0x09, 0x9b, 0xc8, 0xbd, 0x53, 0x2a, 0x85,
	0xcc, 0xa9, 0x4f, 0x86, 0xbd, 0x73, 0xb2, 0xb5, 0x11, 0x35, 0x42, 0x95, 0xc7, 0x24, 0x35, 0x5e,
	0x47, 0x4a, 0x95, 0x0c, 0xce, 0x33, 0xb6, 0xe2, 0xf1, 0x12, 0x15, 0xfb, 0x0e, 0x96, 0xe4, 0x50,
	0x74, 0x4b, 0x63, 0x43, 0x5d, 0xd1, 0x48, 0x8e, 0x5a, 0x0c, 0x01, 0x78, 0xc6, 0xa6, 0x8e, 0x90,
	0x38, 0xf9, 0x13, 0xb8, 0x2d, 0x6a, 0x91, 0x81, 0x29, 0xb5, 0xea, 0x64, 0x44, 0xe8, 0x05, 0xb9,
	0x44, 0x5b, 0x5d, 0x8b, 0xc5, 0x56, 0x96, 0xd2, 0x22, 0x95, 0x61, 0x61, 0x92, 0x6e, 0x5f, 0x51,
	0x95, 0x4d, 0xf6, 0x23, 0x4d, 0xee, 0x39, 0x2c, 0xab, 0x72, 0xb4, 0x84, 0x69, 0xac, 0x04, 0xc7,
	0x90, 0x2c, 0x70, 0xc6, 0xe4, 0xb1, 0xb5, 0x7d, 0x0c, 0x24, 0x26, 0x1e, 0x54, 0x39, 0xa5, 0x95,
	0x22, 0x85, 0xcf, 0x08, 0xc4, 0x2b, 0x30, 0x28, 0x04, 0x51, 0x71, 0x2c, 0x79, 0x61, 0x30, 0x56,
	0x59, 0xab, 0x76, 0xbb, 0x6a, 0x75, 0xcc, 0xa8, 0xc4, 0x95, 0xfe, 0x12, 0x10, 0x8e, 0xa1, 0x78,
	0xe6, 0x92, 0xdf, 0x7e, 0x44, 0x3a, 0xa6, 0x96, 0x59, 0x11, 0x9b, 0xa1, 0xd7, 0x25, 0x59, 0x5a,
	0x11, 0xdb, 0x5b, 0x73, 0xba, 0x5d, 0xe7, 0xca, 0x22, 0x07, 0xc9, 0x5d, 0x65, 0xe3, 0x23, 0x65,
	0xc6, 0xca, 0x6a, 0x8c, 0x9e, 0x4c, 0xa7, 0x52, 0x18, 0xea, 0x26, 0x80, 0x06, 0xb6, 0xd5, 0xef,
	0x4c, 0x0a, 0x74, 0x40, 0x33, 0x94, 0x34, 0xd1, 0x9d, 0xc0, 0xb3, 0xc6, 0xb0, 0xd0, 0x7b, 0x9a,
	0xa9, 0xd4, 0x1a, 0x66, 0x1a, 0xd0, 0xbd, 0x18, 0x55, 0xd4, 0xba, 0x27, 0x01, 0xdc, 0x05, 0x43,
	0xbe, 0xc0, 0x05, 0x36, 0x17, 0x1a, 0xe8, 0x8f, 0x73, 0x11, 0xe7, 0x8b, 0x11, 0x1f, 0x8c, 0x21,
	0xfe, 0x52, 0x79, 0xff, 0x13, 0xd6, 0x1d, 0x59, 0xf8, 0x05, 0x94, 0xe4, 0x98, 0x7a, 0xaf, 0xf5,
	0x71, 0x1c, 0xbd, 0x77, 0xa0, 0x28, 0xc7, 0x60, 0x66, 0x1f, 0x43, 0xb4, 0x0a, 0x40, 0x4e, 0x7d,
	0x5e, 0x5f, 0x0c, 0xb1, 0x86, 0x70, 0xcd, 0xb1, 0xb2, 0xae, 0x95, 0x58, 0x03, 0xa3, 0x1f, 0x40,
	0x59, 0x2d, 0x52, 0xa6, 0x65, 0x9a, 0x64, 0x90, 0x63, 0xa4, 0x71, 0x2a, 0x48, 0x7a, 0xaa, 0x4b,
	0x03, 0x5a, 0x45, 0x4f, 0x26, 0x8b, 0xf2, 0x44, 0xd9, 0x9a, 0x6a, 0x94, 0xee, 0xe6, 0xa5, 0x30,
	0x9e, 0x47, 0xc3, 0xd7, 0x88, 0x96, 0x8e, 0x8d, 0xfb, 0x0a, 0x4c, 0x6c, 0x55, 0x39, 0x0e, 0xaa,
	0x0a, 0xc5, 0x70, 0x15, 0x38, 0xa4, 0x4d, 0xa4, 0x38, 0x1c, 0x07, 0xf1, 0x26, 0x62, 0x1f, 0xe4,
	0x4a, 0x15, 0x09, 0x33, 0x18, 0x63, 0xc3, 0xde, 0xf2, 0xaa, 0x32, 0xce, 0x69, 0x5b, 0x1d, 0xb1,
	0xf9, 0x93, 0x81, 0xed, 0xc2, 0x0a, 0x4b, 0xf7, 0x23, 0xee, 0x9c, 0x76, 0xd8, 0xec, 0x88, 0xc3,
	0x66, 0x04, 0xef, 0xd1, 0x44, 0x5f, 0xc2, 0x3c, 0xd9, 0x65, 0x5a, 0xfa, 0x95, 0xd3, 0xe9, 0x25,
	0x6f, 0x99, 0xbf, 0x42, 0x35, 0x6d, 0x22, 0xbc, 0x0f, 0x25, 0x46, 0x5a, 0x65, 0x8d, 0x5a, 0x62,
	0xe8, 0x55, 0xeb, 0x44, 0x0c, 0xb2, 0xad, 0x94, 0x37, 0x4e, 0x01, 0x41, 0xae, 0x7d, 0x6c, 0xf9,
	0x01, 0x46, 0xc2, 0xe2, 0x93, 0x10, 0x0e, 0x85, 0x01, 0x39, 0x42, 0xba, 0xf5, 0x93, 0x50, 0x76,
	0x29, 0xd5, 0x9b, 0x58, 0x89, 0x2a, 0xe5, 0x45, 0x53, 0x69, 0xb0, 0x43, 0xb9, 0x99, 0xd4, 0x20,
	0x99, 0x6d, 0x16, 0x15, 0x00, 0x2c, 0xf6, 0xa3, 0xf2, 0xa5, 0xf0, 0xec, 0x69, 0xb4, 0x2c, 0x2a,
	0x7e, 0x8c, 0xe1, 0xd0, 0xef, 0x08, 0x79, 0x12, 0x57, 0x74, 0x05, 0x5b, 0xa1, 0x84, 0x11, 0x79,
	0x49, 0x88, 0x01, 0x3a, 0x60, 0x07, 0xbe, 0x02, 0x94, 0x99, 0x77, 0xe2, 0x40, 0xd6, 0x71, 0x28,
	0x61, 0x30, 0xba, 0x42, 0x89, 0x26, 0x8d, 0x82, 0x7c, 0xc7, 0x92, 0x60, 0x18, 0x24, 0x79, 0x5b,
	0xa3, 0x00, 0xbf, 0x81, 0x85, 0x6a, 0xa7, 0x83, 0x0f, 0x15, 0xfb, 0xad, 0xf6, 0xa7, 0x10, 0x03,
	0xd2, 0xde, 0x39, 0x2a, 0xfa, 0xab, 0x06, 0x65, 0x90, 0x73, 0x24, 0x32, 0xb1, 0x5a, 0x1f, 0xba,
	0xcd, 0x29, 0x0f, 0x13, 0x92, 0x60, 0xab, 0xaf, 0x1e, 0x54, 0xf1, 0x22, 0x0b, 0x4b, 0xf1, 0xd4,
	0x20, 0x01, 0xb4, 0xb7, 0x87, 0x24, 0x80, 0x57, 0xfc, 0x3a, 0x38, 0xb9, 0x3c, 0x27, 0xcd, 0x12,
	0x20, 0xe3, 0xf2, 0xa5, 0xc9, 0xef, 0x0b, 0xc2, 0x1e, 0xbc, 0x73, 0x64, 0xdf, 0x32, 0x34, 0x0c,
	0x76, 0xfb, 0x9b, 0x50, 0x01, 0x76, 0xc7, 0x99, 0x62, 0x76, 0x76, 0xeb, 0x13, 0xb3, 0x67, 0xdf,
	0xfa, 0xe8, 0xf3, 0x91, 0xbc, 0x1b, 0x05, 0x13, 0x8f, 0x72, 0x37, 0x12, 0xb2, 0x87, 0xec, 0xac,
	0xe5, 0xc2, 0xa3, 0x46, 0xa0, 0x8e, 0xb2, 0x87, 0x44, 0x44, 0x45, 0xc9, 0x0c, 0x3f, 0x1d, 0xe1,
	0x88, 0x1e, 0x29, 0xf4, 0x40, 0x36, 0x1e, 0xa8, 0x85, 0xb7, 0xd8, 0xa2, 0xad, 0xcc, 0x65, 0xa1,
	0x47, 0x20, 0x02, 0x53, 0x83, 0x12, 0x3d, 0x99, 0x3c, 0xb7, 0xdb, 0xba, 0x66, 0x68, 0x5f, 0xe9,
	0x68, 0x71, 0x39, 0x51, 0xc7, 0x39, 0x82, 0xf2, 0x99, 0xfb, 0x71, 0xd0, 0xea, 0x58, 0xf4, 0x4b,
	0xb8, 0xbc, 0x11, 0x79, 0x9b, 0x49, 0x84, 0x39, 0x05, 0x43, 0x85, 0xf9, 0xe0, 0x50, 0xeb, 0x7e,
	0x23, 0x28, 0x62, 0xea, 0xbb, 0x4a, 0x22, 0xe8, 0xef, 0x61, 0x83, 0x1f, 0x7e, 0xc1, 0x2a, 0xb9,
	0xc7, 0x09, 0xe4, 0xf4, 0x87, 0x92, 0x44, 0xe4, 0x63, 0x28, 0x53, 0x64, 0x15, 0x72, 0x22, 0xf3,
	0x1d, 0xf0, 0xf3, 0x79, 0x2a, 0xe3, 0xd5, 0x61, 0xa5, 0x31, 0x3c, 0xef, 0xda, 0x6d, 0xf6, 0x68,
	0x22, 0x7c, 0xfb, 0x81, 0xb2, 0xc6, 0xf8, 0x07, 0x8b, 0xca, 0x92, 0x8a, 0xc8, 0x38, 0xdc, 0x6a,
	0x63, 0x60, 0x7f, 0x21, 0xd9, 0x6d, 0x7a, 0xac, 0xba, 0xa0, 0x5d, 0x37, 0x01, 0x55, 0x52, 0xa0,
	0xa8, 0x9d, 0xb6, 0xa4, 0x6f, 0x8c, 0xe7, 0x14, 0xef, 0x04, 0x19, 0x51, 0xf7, 0xee, 0xbe, 0xa2,
	0xd3, 0x78, 0x70, 0xaf, 0x91, 0x37, 0x13, 0x32, 0x3a, 0xbd, 0x62, 0x3f, 0x40, 0x45, 0x45, 0xa2,
	0xc9, 0x21, 0x78, 0xd4, 0xd0, 0x35, 0x8c, 0x3c, 0x95, 0x24, 0xe2, 0x36, 0xf0, 0xa0, 0x0d, 0x70,
	0xb1, 0x88, 0x3c, 0xe5, 0x9a, 0x7f, 0xcb, 0x6f, 0x53, 0x37, 0x63, 0xc1, 0x7d, 0xe5, 0xe6, 0xc1,
	0xd2, 0xf9, 0x3d, 0x69, 0xc1, 0x51, 0xfd, 0xa3, 0xc6, 0xd2, 0xaa, 0xa2, 0xd0, 0x64, 0x7e, 0x76,
	0xc4, 0x48, 0x89, 0x74, 0x58, 0x91, 0xe6, 0xef, 0x6a, 0xab, 0xcb, 0x80, 0xa9, 0xf2, 0x7b, 0x99,
	0x02, 0x83, 0x2f, 0xac, 0x21, 0xc7, 0xc8, 0x80, 0x78, 0x8b, 0xde, 0x40, 0x20, 0xc2, 0x71, 0x3d,
	0xa1, 0x3e, 0xc7, 0xb0, 0x19, 0x0f, 0x36, 0xae, 0x56, 0x75, 0x64, 0x7e, 0x62, 0xe7, 0xa9, 0x51,
	0x59, 0x2c, 0x75, 0xb2, 0xc9, 0xb4, 0xbe, 0xed, 0x8c, 0x80, 0xa1, 0x37, 0x86, 0x08, 0x58, 0x2d,
	0xa6, 0xd8, 0xaa, 0xbe, 0xff, 0x30, 0x26, 0xcf, 0x08, 0x18, 0xf6, 0xd3, 0x90, 0xdb, 0x54, 0x06,
	0x86, 0x53, 0x66, 0x02, 0x04, 0x3d, 0xb5, 0x02, 0x08, 0x6a, 0xd3, 0x8a, 0x06, 0x12, 0xc7, 0x43,
	0x34, 0x98, 0x3d, 0xce, 0xe4, 0x26, 0x57, 0x44, 0x72, 0x39, 0x09, 0x91, 0x41, 0xa5, 0x34, 0x79,
	0xc9, 0xe5, 0x94, 0x85, 0x64, 0xb2, 0x29, 0x0d, 0xa3, 0x4e, 0x6b, 0xe1, 0x0c, 0xa0, 0x81, 0x07,
	0xa1, 0xe7, 0x63, 0x81, 0x27, 0x38, 0x8a, 0xa2, 0x8f, 0x57, 0x49, 0x50, 0x8c, 0x16, 0x4e, 0xb8,
	0x16, 0x46, 0x0b, 0xa7, 0x58, 0xc8, 0x33, 0x58, 0x42, 0x37, 0x17, 0xd3, 0x67, 0xf3, 0x42, 0xfa,
	0xc8, 0x46, 0xd5, 0x2e, 0x05, 0x82, 0xa3, 0x12, 0x43, 0x21, 0xcc, 0x89, 0x21, 0x17, 0x1e, 0x97,
	0x18, 0x0a, 0x14, 0x4e, 0x0c, 0x03, 0x94, 0x91, 0x89, 0xa1, 0x40, 0xd8, 0x85, 0xd5, 0x30, 0x13,
	0xc3, 0x0f, 0xc9, 0x9b, 0xa0, 0x55, 0xd9, 0xce, 0x6f, 0xd1, 0xe6, 0x93, 0xff, 0x06, 0x00, 0x00,
	0xff, 0xff, 0x5b, 0xb6, 0x8a, 0x24, 0xb1, 0x30, 0x00, 0x00,
}
